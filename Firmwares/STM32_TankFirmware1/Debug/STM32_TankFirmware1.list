
STM32_TankFirmware1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000350  20000000  08007854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006960  20000350  08007ba4  00020350  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006cb0  08007ba4  00026cb0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019b1f  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000380a  00000000  00000000  00039e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001178  00000000  00000000  0003d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fc0  00000000  00000000  0003e828  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009f7c  00000000  00000000  0003f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005555  00000000  00000000  00049764  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ecb9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000049d8  00000000  00000000  0004ed38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000350 	.word	0x20000350
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080076c8 	.word	0x080076c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000354 	.word	0x20000354
 80001d4:	080076c8 	.word	0x080076c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f94b 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f006 f82c 	bl	8006578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f963 	bl	8000816 <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f92b 	bl	80007c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000118 	.word	0x20000118
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20005390 	.word	0x20005390

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20005390 	.word	0x20005390

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff ffee 	bl	80005b4 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_Delay+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffde 	bl	80005b4 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad2      	subs	r2, r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3f7      	bcc.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000004 	.word	0x20000004

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <__NVIC_EnableIRQ+0x38>)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	095b      	lsrs	r3, r3, #5
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	f002 021f 	and.w	r2, r2, #31
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	490d      	ldr	r1, [pc, #52]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	4909      	ldr	r1, [pc, #36]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000704:	b480      	push	{r7}
 8000706:	b089      	sub	sp, #36	; 0x24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	f1c3 0307 	rsb	r3, r3, #7
 800071e:	2b04      	cmp	r3, #4
 8000720:	bf28      	it	cs
 8000722:	2304      	movcs	r3, #4
 8000724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	2b06      	cmp	r3, #6
 800072c:	d902      	bls.n	8000734 <NVIC_EncodePriority+0x30>
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3b03      	subs	r3, #3
 8000732:	e000      	b.n	8000736 <NVIC_EncodePriority+0x32>
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	2201      	movs	r2, #1
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	1e5a      	subs	r2, r3, #1
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	401a      	ands	r2, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074a:	2101      	movs	r1, #1
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	1e59      	subs	r1, r3, #1
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ff90 	bl	80006b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff2b 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff40 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff90 	bl	8000704 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5f 	bl	80006b0 <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff33 	bl	8000674 <__NVIC_EnableIRQ>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa2 	bl	8000768 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e159      	b.n	8000b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800084c:	2201      	movs	r2, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8148 	bne.w	8000afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d00b      	beq.n	800088a <HAL_GPIO_Init+0x5a>
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d007      	beq.n	800088a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087e:	2b11      	cmp	r3, #17
 8000880:	d003      	beq.n	800088a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b12      	cmp	r3, #18
 8000888:	d130      	bne.n	80008ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4013      	ands	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c0:	2201      	movs	r2, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	091b      	lsrs	r3, r3, #4
 80008d6:	f003 0201 	and.w	r2, r3, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2203      	movs	r2, #3
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0xfc>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b12      	cmp	r3, #18
 800092a:	d123      	bne.n	8000974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	08da      	lsrs	r2, r3, #3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3208      	adds	r2, #8
 8000934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	691a      	ldr	r2, [r3, #16]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	69b9      	ldr	r1, [r7, #24]
 8000970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0203 	and.w	r2, r3, #3
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a2 	beq.w	8000afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4a56      	ldr	r2, [pc, #344]	; (8000b14 <HAL_GPIO_Init+0x2e4>)
 80009bc:	4b55      	ldr	r3, [pc, #340]	; (8000b14 <HAL_GPIO_Init+0x2e4>)
 80009be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <HAL_GPIO_Init+0x2e4>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d2:	4a51      	ldr	r2, [pc, #324]	; (8000b18 <HAL_GPIO_Init+0x2e8>)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a48      	ldr	r2, [pc, #288]	; (8000b1c <HAL_GPIO_Init+0x2ec>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d019      	beq.n	8000a32 <HAL_GPIO_Init+0x202>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a47      	ldr	r2, [pc, #284]	; (8000b20 <HAL_GPIO_Init+0x2f0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0x1fe>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a46      	ldr	r2, [pc, #280]	; (8000b24 <HAL_GPIO_Init+0x2f4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00d      	beq.n	8000a2a <HAL_GPIO_Init+0x1fa>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a45      	ldr	r2, [pc, #276]	; (8000b28 <HAL_GPIO_Init+0x2f8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d007      	beq.n	8000a26 <HAL_GPIO_Init+0x1f6>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a44      	ldr	r2, [pc, #272]	; (8000b2c <HAL_GPIO_Init+0x2fc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_GPIO_Init+0x1f2>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	e008      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a22:	2307      	movs	r3, #7
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a26:	2303      	movs	r3, #3
 8000a28:	e004      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e002      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a32:	2300      	movs	r3, #0
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	f002 0203 	and.w	r2, r2, #3
 8000a3a:	0092      	lsls	r2, r2, #2
 8000a3c:	4093      	lsls	r3, r2
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a44:	4934      	ldr	r1, [pc, #208]	; (8000b18 <HAL_GPIO_Init+0x2e8>)
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a76:	4a2e      	ldr	r2, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa0:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3301      	adds	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	f67f aea2 	bls.w	800084c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3724      	adds	r7, #36	; 0x24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40013800 	.word	0x40013800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b50:	e003      	b.n	8000b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	041a      	lsls	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	619a      	str	r2, [r3, #24]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b68:	b08f      	sub	sp, #60	; 0x3c
 8000b6a:	af0a      	add	r7, sp, #40	; 0x28
 8000b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e10f      	b.n	8000d98 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f005 ffa8 	bl	8006ae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fbdd 	bl	8003376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	687e      	ldr	r6, [r7, #4]
 8000bc4:	466d      	mov	r5, sp
 8000bc6:	f106 0410 	add.w	r4, r6, #16
 8000bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bda:	1d33      	adds	r3, r6, #4
 8000bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bde:	6838      	ldr	r0, [r7, #0]
 8000be0:	f002 fab4 	bl	800314c <USB_CoreInit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2202      	movs	r2, #2
 8000bee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e0d0      	b.n	8000d98 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fbcb 	bl	8003398 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e04a      	b.n	8000c9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	1a9b      	subs	r3, r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	333d      	adds	r3, #61	; 0x3d
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	333c      	adds	r3, #60	; 0x3c
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c30:	7bfa      	ldrb	r2, [r7, #15]
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	b298      	uxth	r0, r3
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	3342      	adds	r3, #66	; 0x42
 8000c44:	4602      	mov	r2, r0
 8000c46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	1a9b      	subs	r3, r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	333f      	adds	r3, #63	; 0x3f
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	3344      	adds	r3, #68	; 0x44
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c70:	7bfa      	ldrb	r2, [r7, #15]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3348      	adds	r3, #72	; 0x48
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c84:	7bfa      	ldrb	r2, [r7, #15]
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	3350      	adds	r3, #80	; 0x50
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3af      	bcc.n	8000c08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e044      	b.n	8000d38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000cd6:	7bfa      	ldrb	r2, [r7, #15]
 8000cd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cda:	7bfa      	ldrb	r2, [r7, #15]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	3301      	adds	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3b5      	bcc.n	8000cae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	687e      	ldr	r6, [r7, #4]
 8000d4a:	466d      	mov	r5, sp
 8000d4c:	f106 0410 	add.w	r4, r6, #16
 8000d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d60:	1d33      	adds	r3, r6, #4
 8000d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f002 fb41 	bl	80033ec <USB_DevInit>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2202      	movs	r2, #2
 8000d74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e00d      	b.n	8000d98 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fbcb 	bl	800452c <USB_DevDisconnect>

  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000da0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d101      	bne.n	8000dbc <HAL_PCD_Start+0x1c>
 8000db8:	2302      	movs	r3, #2
 8000dba:	e020      	b.n	8000dfe <HAL_PCD_Start+0x5e>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d109      	bne.n	8000de0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d005      	beq.n	8000de0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fab5 	bl	8003354 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fb79 	bl	80044e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e06:	b590      	push	{r4, r7, lr}
 8000e08:	b08d      	sub	sp, #52	; 0x34
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fc3b 	bl	8004698 <USB_GetMode>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f040 83aa 	bne.w	800157e <HAL_PCD_IRQHandler+0x778>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fb9f 	bl	8004572 <USB_ReadInterrupts>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 83a0 	beq.w	800157c <HAL_PCD_IRQHandler+0x776>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fb96 	bl	8004572 <USB_ReadInterrupts>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d107      	bne.n	8000e60 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	6952      	ldr	r2, [r2, #20]
 8000e5a:	f002 0202 	and.w	r2, r2, #2
 8000e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fb84 	bl	8004572 <USB_ReadInterrupts>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d161      	bne.n	8000f38 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	6992      	ldr	r2, [r2, #24]
 8000e7e:	f022 0210 	bic.w	r2, r2, #16
 8000e82:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	f003 020f 	and.w	r2, r3, #15
 8000e90:	4613      	mov	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	0c5b      	lsrs	r3, r3, #17
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d124      	bne.n	8000efa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d035      	beq.n	8000f28 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	6a38      	ldr	r0, [r7, #32]
 8000ed0:	f003 f9dc 	bl	800428c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee0:	441a      	add	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ef2:	441a      	add	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	619a      	str	r2, [r3, #24]
 8000ef8:	e016      	b.n	8000f28 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	0c5b      	lsrs	r3, r3, #17
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d110      	bne.n	8000f28 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6a38      	ldr	r0, [r7, #32]
 8000f12:	f003 f9bb 	bl	800428c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f22:	441a      	add	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	6992      	ldr	r2, [r2, #24]
 8000f32:	f042 0210 	orr.w	r2, r2, #16
 8000f36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fb18 	bl	8004572 <USB_ReadInterrupts>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f4c:	d16e      	bne.n	800102c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fb1e 	bl	8004598 <USB_ReadDevAllOutEpInterrupt>
 8000f5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000f5e:	e062      	b.n	8001026 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d057      	beq.n	800101a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fb43 	bl	8004600 <USB_ReadDevOutEPInterrupt>
 8000f7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00c      	beq.n	8000fa0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	015a      	lsls	r2, r3, #5
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f92:	461a      	mov	r2, r3
 8000f94:	2301      	movs	r3, #1
 8000f96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fdbe 	bl	8001b1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	015a      	lsls	r2, r3, #5
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2308      	movs	r3, #8
 8000fba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 feb8 	bl	8001d34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d008      	beq.n	8000fe0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	015a      	lsls	r2, r3, #5
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2310      	movs	r3, #16
 8000fde:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	015a      	lsls	r2, r3, #5
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d009      	beq.n	800101a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	015a      	lsls	r2, r3, #5
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	4413      	add	r3, r2
 800100e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001012:	461a      	mov	r2, r3
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001022:	085b      	lsrs	r3, r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	2b00      	cmp	r3, #0
 800102a:	d199      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f003 fa9e 	bl	8004572 <USB_ReadInterrupts>
 8001036:	4603      	mov	r3, r0
 8001038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800103c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001040:	f040 80c1 	bne.w	80011c6 <HAL_PCD_IRQHandler+0x3c0>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fabf 	bl	80045cc <USB_ReadDevAllInEpInterrupt>
 800104e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001054:	e0b3      	b.n	80011be <HAL_PCD_IRQHandler+0x3b8>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80a8 	beq.w	80011b2 <HAL_PCD_IRQHandler+0x3ac>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fae5 	bl	800463c <USB_ReadDevInEPInterrupt>
 8001072:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d058      	beq.n	8001130 <HAL_PCD_IRQHandler+0x32a>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001092:	4619      	mov	r1, r3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800109a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	015a      	lsls	r2, r3, #5
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	4413      	add	r3, r2
 80010ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b0:	461a      	mov	r2, r3
 80010b2:	2301      	movs	r3, #1
 80010b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d132      	bne.n	8001124 <HAL_PCD_IRQHandler+0x31e>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	3348      	adds	r3, #72	; 0x48
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4403      	add	r3, r0
 80010de:	3344      	adds	r3, #68	; 0x44
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4419      	add	r1, r3
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4403      	add	r3, r0
 80010f2:	3348      	adds	r3, #72	; 0x48
 80010f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d113      	bne.n	8001124 <HAL_PCD_IRQHandler+0x31e>
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3350      	adds	r3, #80	; 0x50
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d108      	bne.n	8001124 <HAL_PCD_IRQHandler+0x31e>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800111c:	461a      	mov	r2, r3
 800111e:	2101      	movs	r1, #1
 8001120:	f003 faee 	bl	8004700 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f005 fd5d 	bl	8006bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <HAL_PCD_IRQHandler+0x346>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	015a      	lsls	r2, r3, #5
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	4413      	add	r3, r2
 8001142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001146:	461a      	mov	r2, r3
 8001148:	2308      	movs	r3, #8
 800114a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <HAL_PCD_IRQHandler+0x362>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	015a      	lsls	r2, r3, #5
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	4413      	add	r3, r2
 800115e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001162:	461a      	mov	r2, r3
 8001164:	2310      	movs	r3, #16
 8001166:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <HAL_PCD_IRQHandler+0x37e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	015a      	lsls	r2, r3, #5
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	4413      	add	r3, r2
 800117a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800117e:	461a      	mov	r2, r3
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d008      	beq.n	80011a0 <HAL_PCD_IRQHandler+0x39a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	015a      	lsls	r2, r3, #5
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	4413      	add	r3, r2
 8001196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800119a:	461a      	mov	r2, r3
 800119c:	2302      	movs	r3, #2
 800119e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_PCD_IRQHandler+0x3ac>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80011aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 fc27 	bl	8001a00 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	3301      	adds	r3, #1
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	085b      	lsrs	r3, r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f47f af48 	bne.w	8001056 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 f9d1 	bl	8004572 <USB_ReadInterrupts>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011da:	d123      	bne.n	8001224 <HAL_PCD_IRQHandler+0x41e>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011e2:	461a      	mov	r2, r3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_PCD_IRQHandler+0x408>
      {
        hpcd->LPM_State = LPM_L0;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001204:	2100      	movs	r1, #0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fe32 	bl	8001e70 <HAL_PCDEx_LPM_Callback>
 800120c:	e002      	b.n	8001214 <HAL_PCD_IRQHandler+0x40e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f005 fd5a 	bl	8006cc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	6952      	ldr	r2, [r2, #20]
 800121e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f9a2 	bl	8004572 <USB_ReadInterrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001238:	d112      	bne.n	8001260 <HAL_PCD_IRQHandler+0x45a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d102      	bne.n	8001250 <HAL_PCD_IRQHandler+0x44a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f005 fd14 	bl	8006c78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	6952      	ldr	r2, [r2, #20]
 800125a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800125e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f003 f984 	bl	8004572 <USB_ReadInterrupts>
 800126a:	4603      	mov	r3, r0
 800126c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001274:	f040 80d2 	bne.w	800141c <HAL_PCD_IRQHandler+0x616>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800127e:	461a      	mov	r2, r3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2110      	movs	r1, #16
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fa0f 	bl	80036b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129e:	e05a      	b.n	8001356 <HAL_PCD_IRQHandler+0x550>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	015a      	lsls	r2, r3, #5
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	4413      	add	r3, r2
 80012a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ac:	461a      	mov	r2, r3
 80012ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	015a      	lsls	r2, r3, #5
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012c0:	4619      	mov	r1, r3
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012d4:	600b      	str	r3, [r1, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e2:	4619      	mov	r1, r3
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012f6:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	015a      	lsls	r2, r3, #5
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	4413      	add	r3, r2
 8001300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001304:	461a      	mov	r2, r3
 8001306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800130a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	015a      	lsls	r2, r3, #5
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	4413      	add	r3, r2
 8001314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001318:	4619      	mov	r1, r3
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	015a      	lsls	r2, r3, #5
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	4413      	add	r3, r2
 8001322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800132c:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	015a      	lsls	r2, r3, #5
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133a:	4619      	mov	r1, r3
 800133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133e:	015a      	lsls	r2, r3, #5
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	4413      	add	r3, r2
 8001344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800134e:	600b      	str	r3, [r1, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	3301      	adds	r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	429a      	cmp	r2, r3
 800135e:	d89f      	bhi.n	80012a0 <HAL_PCD_IRQHandler+0x49a>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001366:	461a      	mov	r2, r3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001374:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	2b00      	cmp	r3, #0
 800137c:	d018      	beq.n	80013b0 <HAL_PCD_IRQHandler+0x5aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001384:	461a      	mov	r2, r3
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800138c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001390:	f043 030b 	orr.w	r3, r3, #11
 8001394:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139e:	461a      	mov	r2, r3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	f043 030b 	orr.w	r3, r3, #11
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	e017      	b.n	80013e0 <HAL_PCD_IRQHandler+0x5da>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b6:	461a      	mov	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d0:	461a      	mov	r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f043 030b 	orr.w	r3, r3, #11
 80013de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013e6:	461a      	mov	r2, r3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001406:	461a      	mov	r2, r3
 8001408:	f003 f97a 	bl	8004700 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	6952      	ldr	r2, [r2, #20]
 8001416:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800141a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 f8a6 	bl	8004572 <USB_ReadInterrupts>
 8001426:	4603      	mov	r3, r0
 8001428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800142c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001430:	d124      	bne.n	800147c <HAL_PCD_IRQHandler+0x676>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f003 f93c 	bl	80046b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 f99b 	bl	800377c <USB_GetDevSpeed>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681c      	ldr	r4, [r3, #0]
 8001452:	f001 f925 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8001456:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4620      	mov	r0, r4
 8001462:	f001 fed5 	bl	8003210 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f005 fbe7 	bl	8006c3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	6952      	ldr	r2, [r2, #20]
 8001476:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800147a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f003 f876 	bl	8004572 <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b08      	cmp	r3, #8
 800148e:	d10a      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x6a0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f005 fbc4 	bl	8006c1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	6952      	ldr	r2, [r2, #20]
 80014a0:	f002 0208 	and.w	r2, r2, #8
 80014a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f861 	bl	8004572 <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ba:	d10f      	bne.n	80014dc <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f005 fc1e 	bl	8006d08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	6952      	ldr	r2, [r2, #20]
 80014d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80014da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f846 	bl	8004572 <USB_ReadInterrupts>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014f0:	d10f      	bne.n	8001512 <HAL_PCD_IRQHandler+0x70c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f005 fbf1 	bl	8006ce4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	6952      	ldr	r2, [r2, #20]
 800150c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f82b 	bl	8004572 <USB_ReadInterrupts>
 800151c:	4603      	mov	r3, r0
 800151e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001526:	d10a      	bne.n	800153e <HAL_PCD_IRQHandler+0x738>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f005 fbff 	bl	8006d2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	6952      	ldr	r2, [r2, #20]
 8001538:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800153c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f815 	bl	8004572 <USB_ReadInterrupts>
 8001548:	4603      	mov	r3, r0
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b04      	cmp	r3, #4
 8001550:	d115      	bne.n	800157e <HAL_PCD_IRQHandler+0x778>
    {
      temp = hpcd->Instance->GOTGINT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_PCD_IRQHandler+0x764>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f005 fbef 	bl	8006d48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	6851      	ldr	r1, [r2, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	e000      	b.n	800157e <HAL_PCD_IRQHandler+0x778>
      return;
 800157c:	bf00      	nop
    }
  }
}
 800157e:	3734      	adds	r7, #52	; 0x34
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_PCD_SetAddress+0x1a>
 800159a:	2302      	movs	r3, #2
 800159c:	e013      	b.n	80015c6 <HAL_PCD_SetAddress+0x42>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 ff6d 	bl	8004496 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	4608      	mov	r0, r1
 80015d8:	4611      	mov	r1, r2
 80015da:	461a      	mov	r2, r3
 80015dc:	4603      	mov	r3, r0
 80015de:	70fb      	strb	r3, [r7, #3]
 80015e0:	460b      	mov	r3, r1
 80015e2:	803b      	strh	r3, [r7, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da0f      	bge.n	8001614 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	f003 020f 	and.w	r2, r3, #15
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	3338      	adds	r3, #56	; 0x38
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	705a      	strb	r2, [r3, #1]
 8001612:	e00f      	b.n	8001634 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 020f 	and.w	r2, r3, #15
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	3304      	adds	r3, #4
 800162c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	b2da      	uxtb	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001640:	883a      	ldrh	r2, [r7, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	78ba      	ldrb	r2, [r7, #2]
 800164a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	785b      	ldrb	r3, [r3, #1]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d102      	bne.n	800166a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_PCD_EP_Open+0xaa>
 8001674:	2302      	movs	r3, #2
 8001676:	e00e      	b.n	8001696 <HAL_PCD_EP_Open+0xc8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f002 f89d 	bl	80037c6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001694:	7afb      	ldrb	r3, [r7, #11]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da0f      	bge.n	80016d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	f003 020f 	and.w	r2, r3, #15
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	3338      	adds	r3, #56	; 0x38
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	3304      	adds	r3, #4
 80016c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2201      	movs	r2, #1
 80016ce:	705a      	strb	r2, [r3, #1]
 80016d0:	e00f      	b.n	80016f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	f003 020f 	and.w	r2, r3, #15
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	3304      	adds	r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_PCD_EP_Close+0x6e>
 8001708:	2302      	movs	r3, #2
 800170a:	e00e      	b.n	800172a <HAL_PCD_EP_Close+0x8c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	4618      	mov	r0, r3
 800171c:	f002 f8de 	bl	80038dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	460b      	mov	r3, r1
 8001740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	f003 020f 	and.w	r2, r3, #15
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	3304      	adds	r3, #4
 800175a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2200      	movs	r2, #0
 8001772:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	b2da      	uxtb	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	f002 fbd9 	bl	8003f5c <USB_EP0StartXfer>
 80017aa:	e008      	b.n	80017be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	6979      	ldr	r1, [r7, #20]
 80017ba:	f002 f973 	bl	8003aa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	f003 020f 	and.w	r2, r3, #15
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	460b      	mov	r3, r1
 8001806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	f003 020f 	and.w	r2, r3, #15
 800180e:	4613      	mov	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	3338      	adds	r3, #56	; 0x38
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2201      	movs	r2, #1
 8001836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001838:	7afb      	ldrb	r3, [r7, #11]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	b2da      	uxtb	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d102      	bne.n	8001852 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	f002 fb77 	bl	8003f5c <USB_EP0StartXfer>
 800186e:	e008      	b.n	8001882 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	f002 f911 	bl	8003aa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 020f 	and.w	r2, r3, #15
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d901      	bls.n	80018aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e050      	b.n	800194c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da0f      	bge.n	80018d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	f003 020f 	and.w	r2, r3, #15
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	3338      	adds	r3, #56	; 0x38
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	3304      	adds	r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2201      	movs	r2, #1
 80018ce:	705a      	strb	r2, [r3, #1]
 80018d0:	e00d      	b.n	80018ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	3304      	adds	r3, #4
 80018e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_PCD_EP_SetStall+0x82>
 800190a:	2302      	movs	r3, #2
 800190c:	e01e      	b.n	800194c <HAL_PCD_EP_SetStall+0xc0>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fcde 	bl	80042de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	b2d9      	uxtb	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800193c:	461a      	mov	r2, r3
 800193e:	f002 fedf 	bl	8004700 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 020f 	and.w	r2, r3, #15
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d901      	bls.n	8001972 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e042      	b.n	80019f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da0f      	bge.n	800199a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 020f 	and.w	r2, r3, #15
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	3338      	adds	r3, #56	; 0x38
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	3304      	adds	r3, #4
 8001990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	705a      	strb	r2, [r3, #1]
 8001998:	e00f      	b.n	80019ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 020f 	and.w	r2, r3, #15
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	3304      	adds	r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_PCD_EP_ClrStall+0x86>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e00e      	b.n	80019f8 <HAL_PCD_EP_ClrStall+0xa4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68f9      	ldr	r1, [r7, #12]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fcea 	bl	80043c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	3338      	adds	r3, #56	; 0x38
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	3304      	adds	r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d901      	bls.n	8001a38 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e06d      	b.n	8001b14 <PCD_WriteEmptyTxFifo+0x114>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d202      	bcs.n	8001a54 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	3303      	adds	r3, #3
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a5c:	e02b      	b.n	8001ab6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d202      	bcs.n	8001a7a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	68d9      	ldr	r1, [r3, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4603      	mov	r3, r0
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f002 fbc2 	bl	8004222 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	441a      	add	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	015a      	lsls	r2, r3, #5
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d309      	bcc.n	8001ae0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d203      	bcs.n	8001ae0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1be      	bne.n	8001a5e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d812      	bhi.n	8001b12 <PCD_WriteEmptyTxFifo+0x112>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	2201      	movs	r2, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b00:	4619      	mov	r1, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	333c      	adds	r3, #60	; 0x3c
 8001b34:	3304      	adds	r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	f040 80a0 	bne.w	8001c94 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d015      	beq.n	8001b8a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <PCD_EP_OutXfrComplete_int+0x210>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	f240 80dd 	bls.w	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80d7 	beq.w	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b80:	461a      	mov	r2, r3
 8001b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b86:	6093      	str	r3, [r2, #8]
 8001b88:	e0cb      	b.n	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d009      	beq.n	8001ba8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	6093      	str	r3, [r2, #8]
 8001ba6:	e0bc      	b.n	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80b7 	bne.w	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a5d      	ldr	r2, [pc, #372]	; (8001d2c <PCD_EP_OutXfrComplete_int+0x210>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d90f      	bls.n	8001bdc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd8:	6093      	str	r3, [r2, #8]
 8001bda:	e0a2      	b.n	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	0159      	lsls	r1, r3, #5
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001c02:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4403      	add	r3, r0
 8001c12:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c16:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4403      	add	r3, r0
 8001c3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4419      	add	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4403      	add	r3, r0
 8001c50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c54:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d114      	bne.n	8001c86 <PCD_EP_OutXfrComplete_int+0x16a>
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d108      	bne.n	8001c86 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2101      	movs	r1, #1
 8001c82:	f002 fd3d 	bl	8004700 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f004 ff91 	bl	8006bb4 <HAL_PCD_DataOutStageCallback>
 8001c92:	e046      	b.n	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <PCD_EP_OutXfrComplete_int+0x214>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d124      	bne.n	8001ce6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb8:	6093      	str	r3, [r2, #8]
 8001cba:	e032      	b.n	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d008      	beq.n	8001cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f004 ff68 	bl	8006bb4 <HAL_PCD_DataOutStageCallback>
 8001ce4:	e01d      	b.n	8001d22 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d114      	bne.n	8001d16 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d108      	bne.n	8001d16 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2100      	movs	r1, #0
 8001d12:	f002 fcf5 	bl	8004700 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f004 ff49 	bl	8006bb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	4f54300a 	.word	0x4f54300a
 8001d30:	4f54310a 	.word	0x4f54310a

08001d34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	333c      	adds	r3, #60	; 0x3c
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <PCD_EP_OutSetupPacket_int+0x88>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d90e      	bls.n	8001d88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d80:	461a      	mov	r2, r3
 8001d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f004 ff01 	bl	8006b90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <PCD_EP_OutSetupPacket_int+0x88>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d90c      	bls.n	8001db0 <PCD_EP_OutSetupPacket_int+0x7c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001da8:	461a      	mov	r2, r3
 8001daa:	2101      	movs	r1, #1
 8001dac:	f002 fca8 	bl	8004700 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	4f54300a 	.word	0x4f54300a

08001dc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d107      	bne.n	8001dee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	883a      	ldrh	r2, [r7, #0]
 8001de4:	0411      	lsls	r1, r2, #16
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
 8001dec:	e028      	b.n	8001e40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	4413      	add	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e00d      	b.n	8001e1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3340      	adds	r3, #64	; 0x40
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4413      	add	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3ec      	bcc.n	8001e02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	883a      	ldrh	r2, [r7, #0]
 8001e32:	0410      	lsls	r0, r2, #16
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	4302      	orrs	r2, r0
 8001e38:	3340      	adds	r3, #64	; 0x40
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e25b      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d075      	beq.n	8001f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	4ba3      	ldr	r3, [pc, #652]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d00c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb2:	4ba0      	ldr	r3, [pc, #640]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d112      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4b9d      	ldr	r3, [pc, #628]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4b99      	ldr	r3, [pc, #612]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05b      	beq.n	8001f90 <HAL_RCC_OscConfig+0x108>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d157      	bne.n	8001f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e236      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x74>
 8001eee:	4a91      	ldr	r2, [pc, #580]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4a8b      	ldr	r2, [pc, #556]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	4b8a      	ldr	r3, [pc, #552]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4a88      	ldr	r2, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	4b87      	ldr	r3, [pc, #540]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001f20:	4a84      	ldr	r2, [pc, #528]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	4b84      	ldr	r3, [pc, #528]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4a81      	ldr	r2, [pc, #516]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	4b81      	ldr	r3, [pc, #516]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe fb38 	bl	80005b4 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7fe fb34 	bl	80005b4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1fb      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xc0>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fb24 	bl	80005b4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7fe fb20 	bl	80005b4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1e7      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0xe8>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1bb      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4956      	ldr	r1, [pc, #344]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	4b55      	ldr	r3, [pc, #340]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_RCC_OscConfig+0x2b0>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fad9 	bl	80005b4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7fe fad5 	bl	80005b4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e19c      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4943      	ldr	r1, [pc, #268]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <HAL_RCC_OscConfig+0x2b0>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe fab8 	bl	80005b4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7fe fab4 	bl	80005b4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e17b      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d030      	beq.n	80020d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe fa98 	bl	80005b4 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe fa94 	bl	80005b4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e15b      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x200>
 80020a6:	e015      	b.n	80020d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fa81 	bl	80005b4 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b6:	f7fe fa7d 	bl	80005b4 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e144      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a0 	beq.w	8002222 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x2b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d121      	bne.n	8002162 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_RCC_OscConfig+0x2b8>)
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_RCC_OscConfig+0x2b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212a:	f7fe fa43 	bl	80005b4 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	e011      	b.n	8002156 <HAL_RCC_OscConfig+0x2ce>
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	42470000 	.word	0x42470000
 800213c:	42470e80 	.word	0x42470e80
 8002140:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002144:	f7fe fa36 	bl	80005b4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0fd      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b81      	ldr	r3, [pc, #516]	; (800235c <HAL_RCC_OscConfig+0x4d4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0x2f0>
 800216a:	4a7d      	ldr	r2, [pc, #500]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800216c:	4b7c      	ldr	r3, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	e01c      	b.n	80021b2 <HAL_RCC_OscConfig+0x32a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d10c      	bne.n	800219a <HAL_RCC_OscConfig+0x312>
 8002180:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002182:	4b77      	ldr	r3, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	4a74      	ldr	r2, [pc, #464]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800218e:	4b74      	ldr	r3, [pc, #464]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	e00b      	b.n	80021b2 <HAL_RCC_OscConfig+0x32a>
 800219a:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800219c:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021a8:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d015      	beq.n	80021e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe f9fb 	bl	80005b4 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe f9f7 	bl	80005b4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0bc      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ee      	beq.n	80021c2 <HAL_RCC_OscConfig+0x33a>
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe f9e5 	bl	80005b4 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe f9e1 	bl	80005b4 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0a6      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	4b56      	ldr	r3, [pc, #344]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ee      	bne.n	80021ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002218:	4b51      	ldr	r3, [pc, #324]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8092 	beq.w	8002350 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800222c:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d05c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d141      	bne.n	80022c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b48      	ldr	r3, [pc, #288]	; (8002364 <HAL_RCC_OscConfig+0x4dc>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe f9b5 	bl	80005b4 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe f9b1 	bl	80005b4 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e078      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002260:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800226c:	493c      	ldr	r1, [pc, #240]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	019b      	lsls	r3, r3, #6
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <HAL_RCC_OscConfig+0x4dc>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe f98a 	bl	80005b4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe f986 	bl	80005b4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04d      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x41c>
 80022c2:	e045      	b.n	8002350 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x4dc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe f973 	bl	80005b4 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe f96f 	bl	80005b4 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e036      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x44a>
 80022f0:	e02e      	b.n	8002350 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e029      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	429a      	cmp	r2, r3
 8002310:	d11c      	bne.n	800234c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d115      	bne.n	800234c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002326:	4013      	ands	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800232c:	4293      	cmp	r3, r2
 800232e:	d10d      	bne.n	800234c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40007000 	.word	0x40007000
 8002360:	40023800 	.word	0x40023800
 8002364:	42470060 	.word	0x42470060

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0cc      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 020f 	and.w	r2, r3, #15
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d20c      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023bc:	4a59      	ldr	r2, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d4:	4a53      	ldr	r2, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4950      	ldr	r1, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d044      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d119      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d003      	beq.n	8002426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e067      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4937      	ldr	r1, [pc, #220]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7fe f8ac 	bl	80005b4 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe f8a8 	bl	80005b4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e04f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e032      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4919      	ldr	r1, [pc, #100]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024da:	4912      	ldr	r1, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ee:	f000 f821 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024f2:	4601      	mov	r1, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	fa21 f303 	lsr.w	r3, r1, r3
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f80c 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00
 8002524:	40023800 	.word	0x40023800
 8002528:	08007728 	.word	0x08007728
 800252c:	20000118 	.word	0x20000118
 8002530:	20000000 	.word	0x20000000

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800253c:	2200      	movs	r2, #0
 800253e:	60fa      	str	r2, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	617a      	str	r2, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002548:	2200      	movs	r2, #0
 800254a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254c:	4a51      	ldr	r2, [pc, #324]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	f002 020c 	and.w	r2, r2, #12
 8002554:	2a04      	cmp	r2, #4
 8002556:	d007      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x34>
 8002558:	2a08      	cmp	r2, #8
 800255a:	d008      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x3a>
 800255c:	2a00      	cmp	r2, #0
 800255e:	f040 8090 	bne.w	8002682 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002562:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_RCC_GetSysClockFreq+0x164>)
 8002564:	613b      	str	r3, [r7, #16]
       break;
 8002566:	e08f      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002568:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_RCC_GetSysClockFreq+0x168>)
 800256a:	613b      	str	r3, [r7, #16]
      break;
 800256c:	e08c      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256e:	4a49      	ldr	r2, [pc, #292]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 8002570:	6852      	ldr	r2, [r2, #4]
 8002572:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002576:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002578:	4a46      	ldr	r2, [pc, #280]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 800257a:	6852      	ldr	r2, [r2, #4]
 800257c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002580:	2a00      	cmp	r2, #0
 8002582:	d023      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	f04f 0400 	mov.w	r4, #0
 800258e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	ea03 0301 	and.w	r3, r3, r1
 800259a:	ea04 0402 	and.w	r4, r4, r2
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_RCC_GetSysClockFreq+0x168>)
 80025a0:	fb02 f104 	mul.w	r1, r2, r4
 80025a4:	2200      	movs	r2, #0
 80025a6:	fb02 f203 	mul.w	r2, r2, r3
 80025aa:	440a      	add	r2, r1
 80025ac:	493b      	ldr	r1, [pc, #236]	; (800269c <HAL_RCC_GetSysClockFreq+0x168>)
 80025ae:	fba3 0101 	umull	r0, r1, r3, r1
 80025b2:	1853      	adds	r3, r2, r1
 80025b4:	4619      	mov	r1, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f04f 0400 	mov.w	r4, #0
 80025bc:	461a      	mov	r2, r3
 80025be:	4623      	mov	r3, r4
 80025c0:	f7fd fe0a 	bl	80001d8 <__aeabi_uldivmod>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e04c      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 80025ce:	6852      	ldr	r2, [r2, #4]
 80025d0:	0992      	lsrs	r2, r2, #6
 80025d2:	4611      	mov	r1, r2
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f240 15ff 	movw	r5, #511	; 0x1ff
 80025dc:	f04f 0600 	mov.w	r6, #0
 80025e0:	ea05 0501 	and.w	r5, r5, r1
 80025e4:	ea06 0602 	and.w	r6, r6, r2
 80025e8:	4629      	mov	r1, r5
 80025ea:	4632      	mov	r2, r6
 80025ec:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80025f0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80025f4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80025f8:	4651      	mov	r1, sl
 80025fa:	465a      	mov	r2, fp
 80025fc:	46aa      	mov	sl, r5
 80025fe:	46b3      	mov	fp, r6
 8002600:	4655      	mov	r5, sl
 8002602:	465e      	mov	r6, fp
 8002604:	1b4d      	subs	r5, r1, r5
 8002606:	eb62 0606 	sbc.w	r6, r2, r6
 800260a:	4629      	mov	r1, r5
 800260c:	4632      	mov	r2, r6
 800260e:	0194      	lsls	r4, r2, #6
 8002610:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002614:	018b      	lsls	r3, r1, #6
 8002616:	1a5b      	subs	r3, r3, r1
 8002618:	eb64 0402 	sbc.w	r4, r4, r2
 800261c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002620:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002624:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002628:	4643      	mov	r3, r8
 800262a:	464c      	mov	r4, r9
 800262c:	4655      	mov	r5, sl
 800262e:	465e      	mov	r6, fp
 8002630:	18ed      	adds	r5, r5, r3
 8002632:	eb46 0604 	adc.w	r6, r6, r4
 8002636:	462b      	mov	r3, r5
 8002638:	4634      	mov	r4, r6
 800263a:	02a2      	lsls	r2, r4, #10
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800264e:	4618      	mov	r0, r3
 8002650:	4621      	mov	r1, r4
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	461a      	mov	r2, r3
 800265a:	4623      	mov	r3, r4
 800265c:	f7fd fdbc 	bl	80001d8 <__aeabi_uldivmod>
 8002660:	4603      	mov	r3, r0
 8002662:	460c      	mov	r4, r1
 8002664:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	3301      	adds	r3, #1
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	613b      	str	r3, [r7, #16]
      break;
 8002680:	e002      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetSysClockFreq+0x164>)
 8002684:	613b      	str	r3, [r7, #16]
      break;
 8002686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002688:	693b      	ldr	r3, [r7, #16]
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	017d7840 	.word	0x017d7840

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000118 	.word	0x20000118

080026b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e01d      	b.n	8002706 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f004 f86c 	bl	80067bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 f9ee 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e01d      	b.n	800275c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d106      	bne.n	800273a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f815 	bl	8002764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f000 f9c3 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fc4a 	bl	8003024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_TIM_PWM_Start+0x60>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d107      	bne.n	80027aa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d007      	beq.n	80027cc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000

080027dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e0b4      	b.n	8002960 <HAL_TIM_PWM_ConfigChannel+0x184>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	f200 809f 	bhi.w	800294c <HAL_TIM_PWM_ConfigChannel+0x170>
 800280e:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002814:	08002849 	.word	0x08002849
 8002818:	0800294d 	.word	0x0800294d
 800281c:	0800294d 	.word	0x0800294d
 8002820:	0800294d 	.word	0x0800294d
 8002824:	08002889 	.word	0x08002889
 8002828:	0800294d 	.word	0x0800294d
 800282c:	0800294d 	.word	0x0800294d
 8002830:	0800294d 	.word	0x0800294d
 8002834:	080028cb 	.word	0x080028cb
 8002838:	0800294d 	.word	0x0800294d
 800283c:	0800294d 	.word	0x0800294d
 8002840:	0800294d 	.word	0x0800294d
 8002844:	0800290b 	.word	0x0800290b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f9c2 	bl	8002bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	6992      	ldr	r2, [r2, #24]
 800285e:	f042 0208 	orr.w	r2, r2, #8
 8002862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	6992      	ldr	r2, [r2, #24]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	6991      	ldr	r1, [r2, #24]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	6912      	ldr	r2, [r2, #16]
 8002882:	430a      	orrs	r2, r1
 8002884:	619a      	str	r2, [r3, #24]
      break;
 8002886:	e062      	b.n	800294e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fa08 	bl	8002ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	6992      	ldr	r2, [r2, #24]
 800289e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	6992      	ldr	r2, [r2, #24]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	6991      	ldr	r1, [r2, #24]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	6912      	ldr	r2, [r2, #16]
 80028c2:	0212      	lsls	r2, r2, #8
 80028c4:	430a      	orrs	r2, r1
 80028c6:	619a      	str	r2, [r3, #24]
      break;
 80028c8:	e041      	b.n	800294e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fa53 	bl	8002d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	69d2      	ldr	r2, [r2, #28]
 80028e0:	f042 0208 	orr.w	r2, r2, #8
 80028e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	69d2      	ldr	r2, [r2, #28]
 80028f0:	f022 0204 	bic.w	r2, r2, #4
 80028f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	69d1      	ldr	r1, [r2, #28]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	6912      	ldr	r2, [r2, #16]
 8002904:	430a      	orrs	r2, r1
 8002906:	61da      	str	r2, [r3, #28]
      break;
 8002908:	e021      	b.n	800294e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fa9d 	bl	8002e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	69d2      	ldr	r2, [r2, #28]
 8002920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	69d2      	ldr	r2, [r2, #28]
 8002930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	69d1      	ldr	r1, [r2, #28]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	6912      	ldr	r2, [r2, #16]
 8002944:	0212      	lsls	r2, r2, #8
 8002946:	430a      	orrs	r2, r1
 8002948:	61da      	str	r2, [r3, #28]
      break;
 800294a:	e000      	b.n	800294e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800294c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_TIM_ConfigClockSource+0x18>
 800297c:	2302      	movs	r3, #2
 800297e:	e0a6      	b.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800299e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	d067      	beq.n	8002a88 <HAL_TIM_ConfigClockSource+0x120>
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d80b      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x6c>
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d073      	beq.n	8002aa8 <HAL_TIM_ConfigClockSource+0x140>
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d802      	bhi.n	80029ca <HAL_TIM_ConfigClockSource+0x62>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d06f      	beq.n	8002aa8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80029c8:	e078      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d06c      	beq.n	8002aa8 <HAL_TIM_ConfigClockSource+0x140>
 80029ce:	2b30      	cmp	r3, #48	; 0x30
 80029d0:	d06a      	beq.n	8002aa8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80029d2:	e073      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029d4:	2b70      	cmp	r3, #112	; 0x70
 80029d6:	d00d      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0x8c>
 80029d8:	2b70      	cmp	r3, #112	; 0x70
 80029da:	d804      	bhi.n	80029e6 <HAL_TIM_ConfigClockSource+0x7e>
 80029dc:	2b50      	cmp	r3, #80	; 0x50
 80029de:	d033      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0xe0>
 80029e0:	2b60      	cmp	r3, #96	; 0x60
 80029e2:	d041      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80029e4:	e06a      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d066      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x152>
 80029ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f0:	d017      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80029f2:	e063      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f000 faee 	bl	8002fe4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
      break;
 8002a20:	e04c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6899      	ldr	r1, [r3, #8]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f000 fad7 	bl	8002fe4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a44:	609a      	str	r2, [r3, #8]
      break;
 8002a46:	e039      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	461a      	mov	r2, r3
 8002a56:	f000 fa4b 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2150      	movs	r1, #80	; 0x50
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 faa4 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002a66:	e029      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	461a      	mov	r2, r3
 8002a76:	f000 fa6a 	bl	8002f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2160      	movs	r1, #96	; 0x60
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa94 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002a86:	e019      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	461a      	mov	r2, r3
 8002a96:	f000 fa2b 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2140      	movs	r1, #64	; 0x40
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fa84 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002aa6:	e009      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f000 fa7b 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e000      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <TIM_Base_SetConfig+0xe4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00f      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d00b      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <TIM_Base_SetConfig+0xe8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d007      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a30      	ldr	r2, [pc, #192]	; (8002bc4 <TIM_Base_SetConfig+0xec>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d003      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <TIM_Base_SetConfig+0xf0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d108      	bne.n	8002b22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <TIM_Base_SetConfig+0xe4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01b      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d017      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <TIM_Base_SetConfig+0xe8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <TIM_Base_SetConfig+0xec>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00f      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <TIM_Base_SetConfig+0xf0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <TIM_Base_SetConfig+0xf4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <TIM_Base_SetConfig+0xf8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <TIM_Base_SetConfig+0xfc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <TIM_Base_SetConfig+0xe4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d103      	bne.n	8002ba8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	615a      	str	r2, [r3, #20]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40000800 	.word	0x40000800
 8002bc8:	40000c00 	.word	0x40000c00
 8002bcc:	40014000 	.word	0x40014000
 8002bd0:	40014400 	.word	0x40014400
 8002bd4:	40014800 	.word	0x40014800

08002bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f023 0201 	bic.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f023 0302 	bic.w	r3, r3, #2
 8002c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <TIM_OC1_SetConfig+0xc8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10c      	bne.n	8002c4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0308 	bic.w	r3, r3, #8
 8002c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <TIM_OC1_SetConfig+0xc8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d111      	bne.n	8002c7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f023 0210 	bic.w	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f023 0320 	bic.w	r3, r3, #32
 8002cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <TIM_OC2_SetConfig+0xd4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10d      	bne.n	8002d20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <TIM_OC2_SetConfig+0xd4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d113      	bne.n	8002d50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40010000 	.word	0x40010000

08002d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <TIM_OC3_SetConfig+0xd0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10d      	bne.n	8002df6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <TIM_OC3_SetConfig+0xd0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d113      	bne.n	8002e26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000

08002e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	031b      	lsls	r3, r3, #12
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a10      	ldr	r2, [pc, #64]	; (8002eec <TIM_OC4_SetConfig+0x9c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d109      	bne.n	8002ec4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	019b      	lsls	r3, r3, #6
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000

08002ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0201 	bic.w	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f023 030a 	bic.w	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	621a      	str	r2, [r3, #32]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f023 0210 	bic.w	r2, r3, #16
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	031b      	lsls	r3, r3, #12
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f043 0307 	orr.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	431a      	orrs	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a1a      	ldr	r2, [r3, #32]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003084:	2302      	movs	r3, #2
 8003086:	e050      	b.n	800312a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d018      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d013      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a18      	ldr	r2, [pc, #96]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a16      	ldr	r2, [pc, #88]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10c      	bne.n	8003118 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4313      	orrs	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40014000 	.word	0x40014000

0800314c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800314c:	b084      	sub	sp, #16
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	f107 001c 	add.w	r0, r7, #28
 800315a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	2b01      	cmp	r3, #1
 8003162:	d122      	bne.n	80031aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800318c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f001 fb10 	bl	80047c4 <USB_CoreReset>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e01a      	b.n	80031e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f001 fb04 	bl	80047c4 <USB_CoreReset>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
 80031d2:	e005      	b.n	80031e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10b      	bne.n	80031fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f043 0206 	orr.w	r2, r3, #6
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800320a:	b004      	add	sp, #16
 800320c:	4770      	bx	lr
	...

08003210 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d165      	bne.n	80032f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4a41      	ldr	r2, [pc, #260]	; (800332c <USB_SetTurnaroundTime+0x11c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d906      	bls.n	800323a <USB_SetTurnaroundTime+0x2a>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4a40      	ldr	r2, [pc, #256]	; (8003330 <USB_SetTurnaroundTime+0x120>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d802      	bhi.n	800323a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003234:	230f      	movs	r3, #15
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e062      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <USB_SetTurnaroundTime+0x120>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d906      	bls.n	8003250 <USB_SetTurnaroundTime+0x40>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <USB_SetTurnaroundTime+0x124>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d802      	bhi.n	8003250 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800324a:	230e      	movs	r3, #14
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	e057      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a38      	ldr	r2, [pc, #224]	; (8003334 <USB_SetTurnaroundTime+0x124>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d906      	bls.n	8003266 <USB_SetTurnaroundTime+0x56>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4a37      	ldr	r2, [pc, #220]	; (8003338 <USB_SetTurnaroundTime+0x128>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d802      	bhi.n	8003266 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003260:	230d      	movs	r3, #13
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e04c      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4a33      	ldr	r2, [pc, #204]	; (8003338 <USB_SetTurnaroundTime+0x128>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d906      	bls.n	800327c <USB_SetTurnaroundTime+0x6c>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4a32      	ldr	r2, [pc, #200]	; (800333c <USB_SetTurnaroundTime+0x12c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d802      	bhi.n	800327c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003276:	230c      	movs	r3, #12
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e041      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <USB_SetTurnaroundTime+0x12c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d906      	bls.n	8003292 <USB_SetTurnaroundTime+0x82>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <USB_SetTurnaroundTime+0x130>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d802      	bhi.n	8003292 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800328c:	230b      	movs	r3, #11
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e036      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <USB_SetTurnaroundTime+0x130>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d906      	bls.n	80032a8 <USB_SetTurnaroundTime+0x98>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <USB_SetTurnaroundTime+0x134>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d802      	bhi.n	80032a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032a2:	230a      	movs	r3, #10
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e02b      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4a26      	ldr	r2, [pc, #152]	; (8003344 <USB_SetTurnaroundTime+0x134>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d906      	bls.n	80032be <USB_SetTurnaroundTime+0xae>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <USB_SetTurnaroundTime+0x138>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d802      	bhi.n	80032be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80032b8:	2309      	movs	r3, #9
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e020      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <USB_SetTurnaroundTime+0x138>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d906      	bls.n	80032d4 <USB_SetTurnaroundTime+0xc4>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <USB_SetTurnaroundTime+0x13c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80032ce:	2308      	movs	r3, #8
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e015      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4a1d      	ldr	r2, [pc, #116]	; (800334c <USB_SetTurnaroundTime+0x13c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d906      	bls.n	80032ea <USB_SetTurnaroundTime+0xda>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <USB_SetTurnaroundTime+0x140>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d802      	bhi.n	80032ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80032e4:	2307      	movs	r3, #7
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e00a      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80032ea:	2306      	movs	r3, #6
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e007      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80032f6:	2309      	movs	r3, #9
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e001      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80032fc:	2309      	movs	r3, #9
 80032fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	00d8acbf 	.word	0x00d8acbf
 8003330:	00e4e1bf 	.word	0x00e4e1bf
 8003334:	00f423ff 	.word	0x00f423ff
 8003338:	0106737f 	.word	0x0106737f
 800333c:	011a499f 	.word	0x011a499f
 8003340:	01312cff 	.word	0x01312cff
 8003344:	014ca43f 	.word	0x014ca43f
 8003348:	016e35ff 	.word	0x016e35ff
 800334c:	01a6ab1f 	.word	0x01a6ab1f
 8003350:	01e847ff 	.word	0x01e847ff

08003354 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d106      	bne.n	80033c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	e00b      	b.n	80033dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	e001      	b.n	80033dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e003      	b.n	80033e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80033dc:	2032      	movs	r0, #50	; 0x32
 80033de:	f7fd f8f5 	bl	80005cc <HAL_Delay>

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033ec:	b084      	sub	sp, #16
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80033fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	e009      	b.n	8003420 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	3340      	adds	r3, #64	; 0x40
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	2200      	movs	r2, #0
 8003418:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3301      	adds	r3, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b0e      	cmp	r3, #14
 8003424:	d9f2      	bls.n	800340c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11d      	bne.n	8003468 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
 8003466:	e00b      	b.n	8003480 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003486:	461a      	mov	r2, r3
 8003488:	2300      	movs	r3, #0
 800348a:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10c      	bne.n	80034be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034aa:	2100      	movs	r1, #0
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f94b 	bl	8003748 <USB_SetDevSpeed>
 80034b2:	e008      	b.n	80034c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034b4:	2101      	movs	r1, #1
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f946 	bl	8003748 <USB_SetDevSpeed>
 80034bc:	e003      	b.n	80034c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80034be:	2103      	movs	r1, #3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f941 	bl	8003748 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80034c6:	2110      	movs	r1, #16
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8f5 	bl	80036b8 <USB_FlushTxFifo>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f913 	bl	8003704 <USB_FlushRxFifo>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ee:	461a      	mov	r2, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fa:	461a      	mov	r2, r3
 80034fc:	2300      	movs	r3, #0
 80034fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003506:	461a      	mov	r2, r3
 8003508:	2300      	movs	r3, #0
 800350a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e043      	b.n	800359a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003528:	d118      	bne.n	800355c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	461a      	mov	r2, r3
 800353e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e013      	b.n	800356e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003552:	461a      	mov	r2, r3
 8003554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e008      	b.n	800356e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	461a      	mov	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357a:	461a      	mov	r2, r3
 800357c:	2300      	movs	r3, #0
 800357e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003592:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	3301      	adds	r3, #1
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d8b7      	bhi.n	8003512 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e043      	b.n	8003630 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035be:	d118      	bne.n	80035f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	461a      	mov	r2, r3
 80035d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e013      	b.n	8003604 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	461a      	mov	r2, r3
 80035ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e008      	b.n	8003604 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	461a      	mov	r2, r3
 8003600:	2300      	movs	r3, #0
 8003602:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003610:	461a      	mov	r2, r3
 8003612:	2300      	movs	r3, #0
 8003614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003628:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3301      	adds	r3, #1
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d8b7      	bhi.n	80035a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800364c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800365a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f043 0210 	orr.w	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <USB_DevInit+0x2c8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f043 0208 	orr.w	r2, r3, #8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800369a:	f043 0304 	orr.w	r3, r3, #4
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036ae:	b004      	add	sp, #16
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	803c3800 	.word	0x803c3800

080036b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <USB_FlushTxFifo+0x48>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e006      	b.n	80036f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d0f0      	beq.n	80036d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	00030d40 	.word	0x00030d40

08003704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2210      	movs	r2, #16
 8003714:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <USB_FlushRxFifo+0x40>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d0f0      	beq.n	8003716 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	00030d40 	.word	0x00030d40

08003748 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375e:	4619      	mov	r1, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0306 	and.w	r3, r3, #6
 8003794:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800379c:	2300      	movs	r3, #0
 800379e:	75fb      	strb	r3, [r7, #23]
 80037a0:	e00a      	b.n	80037b8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d002      	beq.n	80037ae <USB_GetDevSpeed+0x32>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d102      	bne.n	80037b4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80037ae:	2302      	movs	r3, #2
 80037b0:	75fb      	strb	r3, [r7, #23]
 80037b2:	e001      	b.n	80037b8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80037b4:	230f      	movs	r3, #15
 80037b6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d13c      	bne.n	800385c <USB_ActivateEndpoint+0x96>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e8:	4618      	mov	r0, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	b29b      	uxth	r3, r3
 8003802:	4313      	orrs	r3, r2
 8003804:	61c3      	str	r3, [r0, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d158      	bne.n	80038ce <USB_ActivateEndpoint+0x108>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	4618      	mov	r0, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003846:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	059b      	lsls	r3, r3, #22
 800384c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800384e:	4313      	orrs	r3, r2
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003858:	6003      	str	r3, [r0, #0]
 800385a:	e038      	b.n	80038ce <USB_ActivateEndpoint+0x108>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	4618      	mov	r0, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	4313      	orrs	r3, r2
 800387e:	61c3      	str	r3, [r0, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11b      	bne.n	80038ce <USB_ActivateEndpoint+0x108>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	4618      	mov	r0, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	78db      	ldrb	r3, [r3, #3]
 80038be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038c0:	430b      	orrs	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038cc:	6003      	str	r3, [r0, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d165      	bne.n	80039c4 <USB_DeactivateEndpoint+0xe8>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800390a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800390e:	d121      	bne.n	8003954 <USB_DeactivateEndpoint+0x78>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	4619      	mov	r1, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003930:	600b      	str	r3, [r1, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	4619      	mov	r1, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003952:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395a:	4618      	mov	r0, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	4013      	ands	r3, r2
 8003978:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	4618      	mov	r0, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	2101      	movs	r1, #1
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	4013      	ands	r3, r2
 800399e:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	4619      	mov	r1, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <USB_DeactivateEndpoint+0x1c0>)
 80039be:	4013      	ands	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
 80039c2:	e064      	b.n	8003a8e <USB_DeactivateEndpoint+0x1b2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039da:	d121      	bne.n	8003a20 <USB_DeactivateEndpoint+0x144>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e8:	4619      	mov	r1, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039fc:	600b      	str	r3, [r1, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a1e:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	4618      	mov	r0, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	43db      	mvns	r3, r3
 8003a42:	4013      	ands	r3, r2
 8003a44:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	43db      	mvns	r3, r3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	4619      	mov	r1, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <USB_DeactivateEndpoint+0x1c4>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	ec337800 	.word	0xec337800
 8003aa0:	eff37800 	.word	0xeff37800

08003aa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	f040 816c 	bne.w	8003d9e <USB_EPStartXfer+0x2fa>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d135      	bne.n	8003b3a <USB_EPStartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	4619      	mov	r1, r3
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	4619      	mov	r1, r3
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	4619      	mov	r1, r3
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	0cdb      	lsrs	r3, r3, #19
 8003b34:	04db      	lsls	r3, r3, #19
 8003b36:	610b      	str	r3, [r1, #16]
 8003b38:	e07a      	b.n	8003c30 <USB_EPStartXfer+0x18c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b46:	4619      	mov	r1, r3
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	0cdb      	lsrs	r3, r3, #19
 8003b58:	04db      	lsls	r3, r3, #19
 8003b5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	4619      	mov	r1, r3
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b80:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	4618      	mov	r0, r3
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6959      	ldr	r1, [r3, #20]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	440b      	add	r3, r1
 8003ba8:	1e59      	subs	r1, r3, #1
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb2:	04d9      	lsls	r1, r3, #19
 8003bb4:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <USB_EPStartXfer+0x398>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	6103      	str	r3, [r0, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	4619      	mov	r1, r3
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be0:	4313      	orrs	r3, r2
 8003be2:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	78db      	ldrb	r3, [r3, #3]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d121      	bne.n	8003c30 <USB_EPStartXfer+0x18c>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c0c:	610b      	str	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c2e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d14e      	bne.n	8003cd4 <USB_EPStartXfer+0x230>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <USB_EPStartXfer+0x1ae>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	78db      	ldrb	r3, [r3, #3]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d12a      	bne.n	8003cb0 <USB_EPStartXfer+0x20c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d111      	bne.n	8003c8e <USB_EPStartXfer+0x1ea>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	4619      	mov	r1, r3
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c8a:	600b      	str	r3, [r1, #0]
 8003c8c:	e010      	b.n	8003cb0 <USB_EPStartXfer+0x20c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	600b      	str	r3, [r1, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd0:	600b      	str	r3, [r1, #0]
 8003cd2:	e13c      	b.n	8003f4e <USB_EPStartXfer+0x4aa>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cf4:	600b      	str	r3, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	78db      	ldrb	r3, [r3, #3]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d016      	beq.n	8003d2c <USB_EPStartXfer+0x288>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8123 	beq.w	8003f4e <USB_EPStartXfer+0x4aa>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	4618      	mov	r0, r3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	4313      	orrs	r3, r2
 8003d28:	6343      	str	r3, [r0, #52]	; 0x34
 8003d2a:	e110      	b.n	8003f4e <USB_EPStartXfer+0x4aa>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d111      	bne.n	8003d60 <USB_EPStartXfer+0x2bc>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d48:	4619      	mov	r1, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d5c:	600b      	str	r3, [r1, #0]
 8003d5e:	e010      	b.n	8003d82 <USB_EPStartXfer+0x2de>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	600b      	str	r3, [r1, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	68d9      	ldr	r1, [r3, #12]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	b298      	uxth	r0, r3
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4603      	mov	r3, r0
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fa43 	bl	8004222 <USB_WritePacket>
 8003d9c:	e0d7      	b.n	8003f4e <USB_EPStartXfer+0x4aa>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	4619      	mov	r1, r3
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	0cdb      	lsrs	r3, r3, #19
 8003dbc:	04db      	lsls	r3, r3, #19
 8003dbe:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	4619      	mov	r1, r3
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003de4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d128      	bne.n	8003e40 <USB_EPStartXfer+0x39c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e12:	4313      	orrs	r3, r2
 8003e14:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	4619      	mov	r1, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e36:	610b      	str	r3, [r1, #16]
 8003e38:	e038      	b.n	8003eac <USB_EPStartXfer+0x408>
 8003e3a:	bf00      	nop
 8003e3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4413      	add	r3, r2
 8003e4a:	1e5a      	subs	r2, r3, #1
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e62:	4618      	mov	r0, r3
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	8afb      	ldrh	r3, [r7, #22]
 8003e74:	04d9      	lsls	r1, r3, #19
 8003e76:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <USB_EPStartXfer+0x4b4>)
 8003e78:	400b      	ands	r3, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	8af9      	ldrh	r1, [r7, #22]
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10d      	bne.n	8003ece <USB_EPStartXfer+0x42a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	6153      	str	r3, [r2, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	78db      	ldrb	r3, [r3, #3]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d12a      	bne.n	8003f2c <USB_EPStartXfer+0x488>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d111      	bne.n	8003f0a <USB_EPStartXfer+0x466>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f06:	600b      	str	r3, [r1, #0]
 8003f08:	e010      	b.n	8003f2c <USB_EPStartXfer+0x488>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f16:	4619      	mov	r1, r3
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	4619      	mov	r1, r3
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f4c:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	1ff80000 	.word	0x1ff80000

08003f5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 80d8 	bne.w	800412e <USB_EP0StartXfer+0x1d2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d135      	bne.n	8003ff2 <USB_EP0StartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	4619      	mov	r1, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003faa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	4619      	mov	r1, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fcc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	4619      	mov	r1, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	0cdb      	lsrs	r3, r3, #19
 8003fec:	04db      	lsls	r3, r3, #19
 8003fee:	610b      	str	r3, [r1, #16]
 8003ff0:	e052      	b.n	8004098 <USB_EP0StartXfer+0x13c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	4619      	mov	r1, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	0cdb      	lsrs	r3, r3, #19
 8004010:	04db      	lsls	r3, r3, #19
 8004012:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	4619      	mov	r1, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004038:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d903      	bls.n	800404e <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	4619      	mov	r1, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800406e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	4619      	mov	r1, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004094:	4313      	orrs	r3, r2
 8004096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d11f      	bne.n	80040de <USB_EP0StartXfer+0x182>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <USB_EP0StartXfer+0x15e>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	4619      	mov	r1, r3
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e09a      	b.n	8004214 <USB_EP0StartXfer+0x2b8>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	4619      	mov	r1, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040fe:	600b      	str	r3, [r1, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8085 	beq.w	8004214 <USB_EP0StartXfer+0x2b8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	4618      	mov	r0, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	4313      	orrs	r3, r2
 800412a:	6343      	str	r3, [r0, #52]	; 0x34
 800412c:	e072      	b.n	8004214 <USB_EP0StartXfer+0x2b8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	4619      	mov	r1, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	0cdb      	lsrs	r3, r3, #19
 800414c:	04db      	lsls	r3, r3, #19
 800414e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	4619      	mov	r1, r3
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004174:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <USB_EP0StartXfer+0x22a>
    {
      ep->xfer_len = ep->maxpacket;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	4619      	mov	r1, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041a6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	4619      	mov	r1, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10d      	bne.n	80041f2 <USB_EP0StartXfer+0x296>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <USB_EP0StartXfer+0x296>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	6153      	str	r3, [r2, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	4619      	mov	r1, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004212:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004222:	b480      	push	{r7}
 8004224:	b089      	sub	sp, #36	; 0x24
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	4611      	mov	r1, r2
 800422e:	461a      	mov	r2, r3
 8004230:	460b      	mov	r3, r1
 8004232:	71fb      	strb	r3, [r7, #7]
 8004234:	4613      	mov	r3, r2
 8004236:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004240:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11a      	bne.n	800427e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004248:	88bb      	ldrh	r3, [r7, #4]
 800424a:	3303      	adds	r3, #3
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e00f      	b.n	8004276 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	031a      	lsls	r2, r3, #12
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4413      	add	r3, r2
 800425e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004262:	461a      	mov	r2, r3
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6013      	str	r3, [r2, #0]
      pSrc++;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	3301      	adds	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d3eb      	bcc.n	8004256 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3724      	adds	r7, #36	; 0x24
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	3303      	adds	r3, #3
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e00b      	b.n	80042c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3304      	adds	r3, #4
 80042c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	3301      	adds	r3, #1
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d3ef      	bcc.n	80042b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80042d0:	69fb      	ldr	r3, [r7, #28]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	; 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d12e      	bne.n	8004358 <USB_EPSetStall+0x7a>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db13      	blt.n	8004334 <USB_EPSetStall+0x56>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <USB_EPSetStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	4619      	mov	r1, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004332:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004340:	4619      	mov	r1, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	e02d      	b.n	80043b4 <USB_EPSetStall+0xd6>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	db13      	blt.n	8004392 <USB_EPSetStall+0xb4>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d010      	beq.n	8004392 <USB_EPSetStall+0xb4>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	4619      	mov	r1, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004390:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	4619      	mov	r1, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043b2:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d12a      	bne.n	8004434 <USB_EPClearStall+0x72>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	4619      	mov	r1, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043fe:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	78db      	ldrb	r3, [r3, #3]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d003      	beq.n	8004410 <USB_EPClearStall+0x4e>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	78db      	ldrb	r3, [r3, #3]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d13b      	bne.n	8004488 <USB_EPClearStall+0xc6>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	4619      	mov	r1, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	600b      	str	r3, [r1, #0]
 8004432:	e029      	b.n	8004488 <USB_EPClearStall+0xc6>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	4619      	mov	r1, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004454:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	78db      	ldrb	r3, [r3, #3]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d003      	beq.n	8004466 <USB_EPClearStall+0xa4>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	78db      	ldrb	r3, [r3, #3]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d110      	bne.n	8004488 <USB_EPClearStall+0xc6>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	4619      	mov	r1, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004486:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	461a      	mov	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80044ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	4619      	mov	r1, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044f8:	461a      	mov	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	461a      	mov	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f023 0302 	bic.w	r3, r3, #2
 800451c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 0303 	bic.w	r3, r3, #3
 800454c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	461a      	mov	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4013      	ands	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800458a:	68fb      	ldr	r3, [r7, #12]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	0c1b      	lsrs	r3, r3, #16
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	b29b      	uxth	r3, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800462e:	68bb      	ldr	r3, [r7, #8]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	b2db      	uxtb	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800468a:	68bb      	ldr	r3, [r7, #8]
}
 800468c:	4618      	mov	r0, r3
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0301 	and.w	r3, r3, #1
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80046d4:	f023 0307 	bic.w	r3, r3, #7
 80046d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e0:	461a      	mov	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	460b      	mov	r3, r1
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	333c      	adds	r3, #60	; 0x3c
 8004716:	3304      	adds	r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <USB_EP0_OutStart+0xc0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d90a      	bls.n	800473a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004734:	d101      	bne.n	800473a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e03b      	b.n	80047b2 <USB_EP0_OutStart+0xb2>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800475a:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	461a      	mov	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f043 0318 	orr.w	r3, r3, #24
 8004770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	461a      	mov	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004786:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d110      	bne.n	80047b0 <USB_EP0_OutStart+0xb0>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	461a      	mov	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80047ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	4f54300a 	.word	0x4f54300a

080047c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a13      	ldr	r2, [pc, #76]	; (8004828 <USB_CoreReset+0x64>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e01b      	b.n	800481a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	daf2      	bge.n	80047d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <USB_CoreReset+0x64>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e006      	b.n	800481a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d0f0      	beq.n	80047fa <USB_CoreReset+0x36>

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	00030d40 	.word	0x00030d40

0800482c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800483c:	f002 fdaa 	bl	8007394 <malloc>
 8004840:	4603      	mov	r3, r0
 8004842:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004852:	2302      	movs	r3, #2
 8004854:	e066      	b.n	8004924 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7c1b      	ldrb	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d119      	bne.n	800489a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800486a:	2202      	movs	r2, #2
 800486c:	2181      	movs	r1, #129	; 0x81
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f002 fadf 	bl	8006e32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800487a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800487e:	2202      	movs	r2, #2
 8004880:	2101      	movs	r1, #1
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f002 fad5 	bl	8006e32 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2210      	movs	r2, #16
 8004894:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004898:	e016      	b.n	80048c8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	2202      	movs	r2, #2
 800489e:	2181      	movs	r1, #129	; 0x81
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f002 fac6 	bl	8006e32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80048ac:	2340      	movs	r3, #64	; 0x40
 80048ae:	2202      	movs	r2, #2
 80048b0:	2101      	movs	r1, #1
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f002 fabd 	bl	8006e32 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2210      	movs	r2, #16
 80048c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80048c8:	2308      	movs	r3, #8
 80048ca:	2203      	movs	r2, #3
 80048cc:	2182      	movs	r1, #130	; 0x82
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f002 faaf 	bl	8006e32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	7c1b      	ldrb	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004908:	2101      	movs	r1, #1
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f002 fb80 	bl	8007010 <USBD_LL_PrepareReceive>
 8004910:	e007      	b.n	8004922 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	2101      	movs	r1, #1
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f002 fb77 	bl	8007010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800493c:	2181      	movs	r1, #129	; 0x81
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f002 fa9d 	bl	8006e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800494a:	2101      	movs	r1, #1
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f002 fa96 	bl	8006e7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800495a:	2182      	movs	r1, #130	; 0x82
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f002 fa8e 	bl	8006e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00e      	beq.n	800499a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800498c:	4618      	mov	r0, r3
 800498e:	f002 fd09 	bl	80073a4 <free>
    pdev->pClassData = NULL;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d03a      	beq.n	8004a44 <USBD_CDC_Setup+0xa0>
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	f040 8097 	bne.w	8004b02 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	88db      	ldrh	r3, [r3, #6]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d029      	beq.n	8004a30 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b25b      	sxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da11      	bge.n	8004a0a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80049f2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	88d2      	ldrh	r2, [r2, #6]
 80049f8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80049fa:	6939      	ldr	r1, [r7, #16]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	88db      	ldrh	r3, [r3, #6]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 fa6d 	bl	8005ee2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004a08:	e082      	b.n	8004b10 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	785a      	ldrb	r2, [r3, #1]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	88db      	ldrh	r3, [r3, #6]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004a20:	6939      	ldr	r1, [r7, #16]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	88db      	ldrh	r3, [r3, #6]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f001 fa86 	bl	8005f3a <USBD_CtlPrepareRx>
    break;
 8004a2e:	e06f      	b.n	8004b10 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	7850      	ldrb	r0, [r2, #1]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	4798      	blx	r3
    break;
 8004a42:	e065      	b.n	8004b10 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b0b      	cmp	r3, #11
 8004a4a:	d84f      	bhi.n	8004aec <USBD_CDC_Setup+0x148>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <USBD_CDC_Setup+0xb0>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a85 	.word	0x08004a85
 8004a58:	08004afb 	.word	0x08004afb
 8004a5c:	08004aed 	.word	0x08004aed
 8004a60:	08004aed 	.word	0x08004aed
 8004a64:	08004aed 	.word	0x08004aed
 8004a68:	08004aed 	.word	0x08004aed
 8004a6c:	08004aed 	.word	0x08004aed
 8004a70:	08004aed 	.word	0x08004aed
 8004a74:	08004aed 	.word	0x08004aed
 8004a78:	08004aed 	.word	0x08004aed
 8004a7c:	08004aad 	.word	0x08004aad
 8004a80:	08004ad5 	.word	0x08004ad5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d107      	bne.n	8004a9e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004a8e:	f107 030c 	add.w	r3, r7, #12
 8004a92:	2202      	movs	r2, #2
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 fa23 	bl	8005ee2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004a9c:	e030      	b.n	8004b00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004a9e:	6839      	ldr	r1, [r7, #0]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f001 f9ad 	bl	8005e00 <USBD_CtlError>
        ret = USBD_FAIL;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aaa:	e029      	b.n	8004b00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d107      	bne.n	8004ac6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ab6:	f107 030f 	add.w	r3, r7, #15
 8004aba:	2201      	movs	r2, #1
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 fa0f 	bl	8005ee2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ac4:	e01c      	b.n	8004b00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f001 f999 	bl	8005e00 <USBD_CtlError>
        ret = USBD_FAIL;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad2:	e015      	b.n	8004b00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d00f      	beq.n	8004afe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 f98d 	bl	8005e00 <USBD_CtlError>
        ret = USBD_FAIL;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004aea:	e008      	b.n	8004afe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 f986 	bl	8005e00 <USBD_CtlError>
      ret = USBD_FAIL;
 8004af4:	2303      	movs	r3, #3
 8004af6:	75fb      	strb	r3, [r7, #23]
      break;
 8004af8:	e002      	b.n	8004b00 <USBD_CDC_Setup+0x15c>
      break;
 8004afa:	bf00      	nop
 8004afc:	e008      	b.n	8004b10 <USBD_CDC_Setup+0x16c>
      break;
 8004afe:	bf00      	nop
    }
    break;
 8004b00:	e006      	b.n	8004b10 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004b02:	6839      	ldr	r1, [r7, #0]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f001 f97b 	bl	8005e00 <USBD_CtlError>
    ret = USBD_FAIL;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	75fb      	strb	r3, [r7, #23]
    break;
 8004b0e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop

08004b1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004b2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e049      	b.n	8004bd2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3318      	adds	r3, #24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d029      	beq.n	8004bb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	3318      	adds	r3, #24
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	78f9      	ldrb	r1, [r7, #3]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	460b      	mov	r3, r1
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	1a5b      	subs	r3, r3, r1
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4403      	add	r3, r0
 8004b7c:	3344      	adds	r3, #68	; 0x44
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b84:	fb03 f301 	mul.w	r3, r3, r1
 8004b88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d110      	bne.n	8004bb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ba2:	78f9      	ldrb	r1, [r7, #3]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f002 fa10 	bl	8006fce <USBD_LL_Transmit>
 8004bae:	e00f      	b.n	8004bd0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e015      	b.n	8004c28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f002 fa26 	bl	8007052 <USBD_LL_GetRxDataSize>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004c22:	4611      	mov	r1, r2
 8004c24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c3e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d015      	beq.n	8004c76 <USBD_CDC_EP0_RxReady+0x46>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c50:	2bff      	cmp	r3, #255	; 0xff
 8004c52:	d010      	beq.n	8004c76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004c62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	22ff      	movs	r2, #255	; 0xff
 8004c72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2243      	movs	r2, #67	; 0x43
 8004c8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004c8e:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000090 	.word	0x20000090

08004ca0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2243      	movs	r2, #67	; 0x43
 8004cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004cae:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	2000004c 	.word	0x2000004c

08004cc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2243      	movs	r2, #67	; 0x43
 8004ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004cce:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	200000d4 	.word	0x200000d4

08004ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	220a      	movs	r2, #10
 8004cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004cee:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000008 	.word	0x20000008

08004d00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e004      	b.n	8004d1e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b087      	sub	sp, #28
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d6c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e016      	b.n	8004dd0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7c1b      	ldrb	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004db4:	2101      	movs	r1, #1
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f002 f92a 	bl	8007010 <USBD_LL_PrepareReceive>
 8004dbc:	e007      	b.n	8004dce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dc4:	2340      	movs	r3, #64	; 0x40
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f002 f921 	bl	8007010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e025      	b.n	8004e3c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	79fa      	ldrb	r2, [r7, #7]
 8004e2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f001 ff97 	bl	8006d64 <USBD_LL_Init>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e010      	b.n	8004e7e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f107 020e 	add.w	r2, r7, #14
 8004e70:	4610      	mov	r0, r2
 8004e72:	4798      	blx	r3
 8004e74:	4602      	mov	r2, r0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 ffb4 	bl	8006dfc <USBD_LL_Start>
 8004e94:	4603      	mov	r3, r0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
  }

  return USBD_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 ff2c 	bl	8005d8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d00e      	beq.n	8004f76 <USBD_LL_SetupStage+0x5a>
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d302      	bcc.n	8004f62 <USBD_LL_SetupStage+0x46>
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d014      	beq.n	8004f8a <USBD_LL_SetupStage+0x6e>
 8004f60:	e01d      	b.n	8004f9e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa18 	bl	80053a0 <USBD_StdDevReq>
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e020      	b.n	8004fb8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa7c 	bl	800547c <USBD_StdItfReq>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e016      	b.n	8004fb8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fab8 	bl	8005508 <USBD_StdEPReq>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9c:	e00c      	b.n	8004fb8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 ff85 	bl	8006ebc <USBD_LL_StallEP>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb6:	bf00      	nop
  }

  return ret;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004fd0:	7afb      	ldrb	r3, [r7, #11]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d137      	bne.n	8005046 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004fdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d14a      	bne.n	800507e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d913      	bls.n	800501c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	1ad2      	subs	r2, r2, r3
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	4293      	cmp	r3, r2
 800500c:	bf28      	it	cs
 800500e:	4613      	movcs	r3, r2
 8005010:	461a      	mov	r2, r3
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 ffad 	bl	8005f74 <USBD_CtlContinueRx>
 800501a:	e030      	b.n	800507e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800502e:	2b03      	cmp	r3, #3
 8005030:	d105      	bne.n	800503e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 ffa9 	bl	8005f96 <USBD_CtlSendStatus>
 8005044:	e01b      	b.n	800507e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d013      	beq.n	800507a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005058:	2b03      	cmp	r3, #3
 800505a:	d10e      	bne.n	800507a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	7afa      	ldrb	r2, [r7, #11]
 8005066:	4611      	mov	r1, r2
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	4798      	blx	r3
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	e002      	b.n	8005080 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800507a:	2303      	movs	r3, #3
 800507c:	e000      	b.n	8005080 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	460b      	mov	r3, r1
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005096:	7afb      	ldrb	r3, [r7, #11]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d16a      	bne.n	8005172 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3314      	adds	r3, #20
 80050a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d155      	bne.n	8005158 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d914      	bls.n	80050e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	1ad2      	subs	r2, r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 ff22 	bl	8005f18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050d4:	2300      	movs	r3, #0
 80050d6:	2200      	movs	r2, #0
 80050d8:	2100      	movs	r1, #0
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f001 ff98 	bl	8007010 <USBD_LL_PrepareReceive>
 80050e0:	e03a      	b.n	8005158 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d11c      	bne.n	8005128 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d316      	bcc.n	8005128 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005104:	429a      	cmp	r2, r3
 8005106:	d20f      	bcs.n	8005128 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005108:	2200      	movs	r2, #0
 800510a:	2100      	movs	r1, #0
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 ff03 	bl	8005f18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800511a:	2300      	movs	r3, #0
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f001 ff75 	bl	8007010 <USBD_LL_PrepareReceive>
 8005126:	e017      	b.n	8005158 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800513a:	2b03      	cmp	r3, #3
 800513c:	d105      	bne.n	800514a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800514a:	2180      	movs	r1, #128	; 0x80
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f001 feb5 	bl	8006ebc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 ff32 	bl	8005fbc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d123      	bne.n	80051aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff fe9b 	bl	8004e9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005170:	e01b      	b.n	80051aa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d013      	beq.n	80051a6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005184:	2b03      	cmp	r3, #3
 8005186:	d10e      	bne.n	80051a6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	7afa      	ldrb	r2, [r7, #11]
 8005192:	4611      	mov	r1, r2
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	4798      	blx	r3
 8005198:	4603      	mov	r3, r0
 800519a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	e002      	b.n	80051ac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e000      	b.n	80051ac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6852      	ldr	r2, [r2, #4]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	4611      	mov	r1, r2
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051f8:	2340      	movs	r3, #64	; 0x40
 80051fa:	2200      	movs	r2, #0
 80051fc:	2100      	movs	r1, #0
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f001 fe17 	bl	8006e32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2240      	movs	r2, #64	; 0x40
 8005210:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	2200      	movs	r2, #0
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 fe09 	bl	8006e32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2240      	movs	r2, #64	; 0x40
 800522a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528e:	2b04      	cmp	r3, #4
 8005290:	d105      	bne.n	800529e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d10b      	bne.n	80052d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d009      	beq.n	8005358 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6852      	ldr	r2, [r2, #4]
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	4611      	mov	r1, r2
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
  }

  return USBD_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	3301      	adds	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005380:	8a3b      	ldrh	r3, [r7, #16]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	b21a      	sxth	r2, r3
 8005386:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800538a:	4313      	orrs	r3, r2
 800538c:	b21b      	sxth	r3, r3
 800538e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005390:	89fb      	ldrh	r3, [r7, #14]
}
 8005392:	4618      	mov	r0, r3
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d004      	beq.n	80053c4 <USBD_StdDevReq+0x24>
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d002      	beq.n	80053c4 <USBD_StdDevReq+0x24>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <USBD_StdDevReq+0x38>
 80053c2:	e050      	b.n	8005466 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	73fb      	strb	r3, [r7, #15]
    break;
 80053d6:	e04b      	b.n	8005470 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b09      	cmp	r3, #9
 80053de:	d83c      	bhi.n	800545a <USBD_StdDevReq+0xba>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <USBD_StdDevReq+0x48>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	08005451 	.word	0x08005451
 80053f0:	0800545b 	.word	0x0800545b
 80053f4:	08005447 	.word	0x08005447
 80053f8:	0800545b 	.word	0x0800545b
 80053fc:	0800541b 	.word	0x0800541b
 8005400:	08005411 	.word	0x08005411
 8005404:	0800545b 	.word	0x0800545b
 8005408:	08005433 	.word	0x08005433
 800540c:	08005425 	.word	0x08005425
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9ce 	bl	80057b4 <USBD_GetDescriptor>
      break;
 8005418:	e024      	b.n	8005464 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fb33 	bl	8005a88 <USBD_SetAddress>
      break;
 8005422:	e01f      	b.n	8005464 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fb70 	bl	8005b0c <USBD_SetConfig>
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]
      break;
 8005430:	e018      	b.n	8005464 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fc0d 	bl	8005c54 <USBD_GetConfig>
      break;
 800543a:	e013      	b.n	8005464 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fc3c 	bl	8005cbc <USBD_GetStatus>
      break;
 8005444:	e00e      	b.n	8005464 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005446:	6839      	ldr	r1, [r7, #0]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fc6a 	bl	8005d22 <USBD_SetFeature>
      break;
 800544e:	e009      	b.n	8005464 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fc79 	bl	8005d4a <USBD_ClrFeature>
      break;
 8005458:	e004      	b.n	8005464 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fccf 	bl	8005e00 <USBD_CtlError>
      break;
 8005462:	bf00      	nop
    }
    break;
 8005464:	e004      	b.n	8005470 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fcc9 	bl	8005e00 <USBD_CtlError>
    break;
 800546e:	bf00      	nop
  }

  return ret;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005492:	2b20      	cmp	r3, #32
 8005494:	d003      	beq.n	800549e <USBD_StdItfReq+0x22>
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d001      	beq.n	800549e <USBD_StdItfReq+0x22>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d12a      	bne.n	80054f4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a4:	3b01      	subs	r3, #1
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d81d      	bhi.n	80054e6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	889b      	ldrh	r3, [r3, #4]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d813      	bhi.n	80054dc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4798      	blx	r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	88db      	ldrh	r3, [r3, #6]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d110      	bne.n	80054f0 <USBD_StdItfReq+0x74>
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10d      	bne.n	80054f0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fd5e 	bl	8005f96 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80054da:	e009      	b.n	80054f0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fc8e 	bl	8005e00 <USBD_CtlError>
      break;
 80054e4:	e004      	b.n	80054f0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fc89 	bl	8005e00 <USBD_CtlError>
      break;
 80054ee:	e000      	b.n	80054f2 <USBD_StdItfReq+0x76>
      break;
 80054f0:	bf00      	nop
    }
    break;
 80054f2:	e004      	b.n	80054fe <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fc82 	bl	8005e00 <USBD_CtlError>
    break;
 80054fc:	bf00      	nop
  }

  return ret;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	889b      	ldrh	r3, [r3, #4]
 800551a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005524:	2b20      	cmp	r3, #32
 8005526:	d004      	beq.n	8005532 <USBD_StdEPReq+0x2a>
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d002      	beq.n	8005532 <USBD_StdEPReq+0x2a>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <USBD_StdEPReq+0x3e>
 8005530:	e135      	b.n	800579e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]
    break;
 8005544:	e130      	b.n	80057a8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d03e      	beq.n	80055cc <USBD_StdEPReq+0xc4>
 800554e:	2b03      	cmp	r3, #3
 8005550:	d002      	beq.n	8005558 <USBD_StdEPReq+0x50>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d077      	beq.n	8005646 <USBD_StdEPReq+0x13e>
 8005556:	e11c      	b.n	8005792 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555e:	2b02      	cmp	r3, #2
 8005560:	d002      	beq.n	8005568 <USBD_StdEPReq+0x60>
 8005562:	2b03      	cmp	r3, #3
 8005564:	d015      	beq.n	8005592 <USBD_StdEPReq+0x8a>
 8005566:	e02b      	b.n	80055c0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005568:	7bbb      	ldrb	r3, [r7, #14]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <USBD_StdEPReq+0x80>
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d009      	beq.n	8005588 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f001 fc9f 	bl	8006ebc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800557e:	2180      	movs	r1, #128	; 0x80
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 fc9b 	bl	8006ebc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005586:	e020      	b.n	80055ca <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fc38 	bl	8005e00 <USBD_CtlError>
        break;
 8005590:	e01b      	b.n	80055ca <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	885b      	ldrh	r3, [r3, #2]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10e      	bne.n	80055b8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <USBD_StdEPReq+0xb0>
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d008      	beq.n	80055b8 <USBD_StdEPReq+0xb0>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	88db      	ldrh	r3, [r3, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 fc82 	bl	8006ebc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fcec 	bl	8005f96 <USBD_CtlSendStatus>

        break;
 80055be:	e004      	b.n	80055ca <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fc1c 	bl	8005e00 <USBD_CtlError>
        break;
 80055c8:	bf00      	nop
      }
      break;
 80055ca:	e0e7      	b.n	800579c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d002      	beq.n	80055dc <USBD_StdEPReq+0xd4>
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d015      	beq.n	8005606 <USBD_StdEPReq+0xfe>
 80055da:	e02d      	b.n	8005638 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055dc:	7bbb      	ldrb	r3, [r7, #14]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00c      	beq.n	80055fc <USBD_StdEPReq+0xf4>
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	2b80      	cmp	r3, #128	; 0x80
 80055e6:	d009      	beq.n	80055fc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fc65 	bl	8006ebc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055f2:	2180      	movs	r1, #128	; 0x80
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fc61 	bl	8006ebc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80055fa:	e023      	b.n	8005644 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fbfe 	bl	8005e00 <USBD_CtlError>
        break;
 8005604:	e01e      	b.n	8005644 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	885b      	ldrh	r3, [r3, #2]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d119      	bne.n	8005642 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800560e:	7bbb      	ldrb	r3, [r7, #14]
 8005610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fc6c 	bl	8006efa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fcb7 	bl	8005f96 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
        }
        break;
 8005636:	e004      	b.n	8005642 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fbe0 	bl	8005e00 <USBD_CtlError>
        break;
 8005640:	e000      	b.n	8005644 <USBD_StdEPReq+0x13c>
        break;
 8005642:	bf00      	nop
      }
      break;
 8005644:	e0aa      	b.n	800579c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800564c:	2b02      	cmp	r3, #2
 800564e:	d002      	beq.n	8005656 <USBD_StdEPReq+0x14e>
 8005650:	2b03      	cmp	r3, #3
 8005652:	d032      	beq.n	80056ba <USBD_StdEPReq+0x1b2>
 8005654:	e097      	b.n	8005786 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <USBD_StdEPReq+0x164>
 800565c:	7bbb      	ldrb	r3, [r7, #14]
 800565e:	2b80      	cmp	r3, #128	; 0x80
 8005660:	d004      	beq.n	800566c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fbcb 	bl	8005e00 <USBD_CtlError>
          break;
 800566a:	e091      	b.n	8005790 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800566c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005670:	2b00      	cmp	r3, #0
 8005672:	da0b      	bge.n	800568c <USBD_StdEPReq+0x184>
 8005674:	7bbb      	ldrb	r3, [r7, #14]
 8005676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	3310      	adds	r3, #16
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	4413      	add	r3, r2
 8005688:	3304      	adds	r3, #4
 800568a:	e00b      	b.n	80056a4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	3304      	adds	r3, #4
 80056a4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2202      	movs	r2, #2
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fc15 	bl	8005ee2 <USBD_CtlSendData>
        break;
 80056b8:	e06a      	b.n	8005790 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80056ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da11      	bge.n	80056e6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	f003 020f 	and.w	r2, r3, #15
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	3324      	adds	r3, #36	; 0x24
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d117      	bne.n	800570c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fb8e 	bl	8005e00 <USBD_CtlError>
            break;
 80056e4:	e054      	b.n	8005790 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80056e6:	7bbb      	ldrb	r3, [r7, #14]
 80056e8:	f003 020f 	and.w	r2, r3, #15
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fb7b 	bl	8005e00 <USBD_CtlError>
            break;
 800570a:	e041      	b.n	8005790 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800570c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005710:	2b00      	cmp	r3, #0
 8005712:	da0b      	bge.n	800572c <USBD_StdEPReq+0x224>
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	3310      	adds	r3, #16
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4413      	add	r3, r2
 8005728:	3304      	adds	r3, #4
 800572a:	e00b      	b.n	8005744 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4413      	add	r3, r2
 8005742:	3304      	adds	r3, #4
 8005744:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005746:	7bbb      	ldrb	r3, [r7, #14]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <USBD_StdEPReq+0x24a>
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d103      	bne.n	800575a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e00e      	b.n	8005778 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800575a:	7bbb      	ldrb	r3, [r7, #14]
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fbea 	bl	8006f38 <USBD_LL_IsStallEP>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2201      	movs	r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e002      	b.n	8005778 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2202      	movs	r2, #2
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fbaf 	bl	8005ee2 <USBD_CtlSendData>
          break;
 8005784:	e004      	b.n	8005790 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fb39 	bl	8005e00 <USBD_CtlError>
        break;
 800578e:	bf00      	nop
      }
      break;
 8005790:	e004      	b.n	800579c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fb33 	bl	8005e00 <USBD_CtlError>
      break;
 800579a:	bf00      	nop
    }
    break;
 800579c:	e004      	b.n	80057a8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fb2d 	bl	8005e00 <USBD_CtlError>
    break;
 80057a6:	bf00      	nop
  }

  return ret;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	885b      	ldrh	r3, [r3, #2]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	2b06      	cmp	r3, #6
 80057d6:	f200 8128 	bhi.w	8005a2a <USBD_GetDescriptor+0x276>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <USBD_GetDescriptor+0x2c>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	080057fd 	.word	0x080057fd
 80057e4:	08005815 	.word	0x08005815
 80057e8:	08005855 	.word	0x08005855
 80057ec:	08005a2b 	.word	0x08005a2b
 80057f0:	08005a2b 	.word	0x08005a2b
 80057f4:	080059cb 	.word	0x080059cb
 80057f8:	080059f7 	.word	0x080059f7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	7c12      	ldrb	r2, [r2, #16]
 8005808:	f107 0108 	add.w	r1, r7, #8
 800580c:	4610      	mov	r0, r2
 800580e:	4798      	blx	r3
 8005810:	60f8      	str	r0, [r7, #12]
    break;
 8005812:	e112      	b.n	8005a3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7c1b      	ldrb	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	f107 0208 	add.w	r2, r7, #8
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
 800582c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	2202      	movs	r2, #2
 8005834:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005836:	e100      	b.n	8005a3a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	f107 0208 	add.w	r2, r7, #8
 8005844:	4610      	mov	r0, r2
 8005846:	4798      	blx	r3
 8005848:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3301      	adds	r3, #1
 800584e:	2202      	movs	r2, #2
 8005850:	701a      	strb	r2, [r3, #0]
    break;
 8005852:	e0f2      	b.n	8005a3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	885b      	ldrh	r3, [r3, #2]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b05      	cmp	r3, #5
 800585c:	f200 80ac 	bhi.w	80059b8 <USBD_GetDescriptor+0x204>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <USBD_GetDescriptor+0xb4>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005881 	.word	0x08005881
 800586c:	080058b5 	.word	0x080058b5
 8005870:	080058e9 	.word	0x080058e9
 8005874:	0800591d 	.word	0x0800591d
 8005878:	08005951 	.word	0x08005951
 800587c:	08005985 	.word	0x08005985
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	7c12      	ldrb	r2, [r2, #16]
 8005898:	f107 0108 	add.w	r1, r7, #8
 800589c:	4610      	mov	r0, r2
 800589e:	4798      	blx	r3
 80058a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058a2:	e091      	b.n	80059c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 faaa 	bl	8005e00 <USBD_CtlError>
        err++;
 80058ac:	7afb      	ldrb	r3, [r7, #11]
 80058ae:	3301      	adds	r3, #1
 80058b0:	72fb      	strb	r3, [r7, #11]
      break;
 80058b2:	e089      	b.n	80059c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	7c12      	ldrb	r2, [r2, #16]
 80058cc:	f107 0108 	add.w	r1, r7, #8
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
 80058d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058d6:	e077      	b.n	80059c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa90 	bl	8005e00 <USBD_CtlError>
        err++;
 80058e0:	7afb      	ldrb	r3, [r7, #11]
 80058e2:	3301      	adds	r3, #1
 80058e4:	72fb      	strb	r3, [r7, #11]
      break;
 80058e6:	e06f      	b.n	80059c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00b      	beq.n	800590c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	7c12      	ldrb	r2, [r2, #16]
 8005900:	f107 0108 	add.w	r1, r7, #8
 8005904:	4610      	mov	r0, r2
 8005906:	4798      	blx	r3
 8005908:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800590a:	e05d      	b.n	80059c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fa76 	bl	8005e00 <USBD_CtlError>
        err++;
 8005914:	7afb      	ldrb	r3, [r7, #11]
 8005916:	3301      	adds	r3, #1
 8005918:	72fb      	strb	r3, [r7, #11]
      break;
 800591a:	e055      	b.n	80059c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	7c12      	ldrb	r2, [r2, #16]
 8005934:	f107 0108 	add.w	r1, r7, #8
 8005938:	4610      	mov	r0, r2
 800593a:	4798      	blx	r3
 800593c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800593e:	e043      	b.n	80059c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa5c 	bl	8005e00 <USBD_CtlError>
        err++;
 8005948:	7afb      	ldrb	r3, [r7, #11]
 800594a:	3301      	adds	r3, #1
 800594c:	72fb      	strb	r3, [r7, #11]
      break;
 800594e:	e03b      	b.n	80059c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00b      	beq.n	8005974 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	7c12      	ldrb	r2, [r2, #16]
 8005968:	f107 0108 	add.w	r1, r7, #8
 800596c:	4610      	mov	r0, r2
 800596e:	4798      	blx	r3
 8005970:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005972:	e029      	b.n	80059c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa42 	bl	8005e00 <USBD_CtlError>
        err++;
 800597c:	7afb      	ldrb	r3, [r7, #11]
 800597e:	3301      	adds	r3, #1
 8005980:	72fb      	strb	r3, [r7, #11]
      break;
 8005982:	e021      	b.n	80059c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	7c12      	ldrb	r2, [r2, #16]
 800599c:	f107 0108 	add.w	r1, r7, #8
 80059a0:	4610      	mov	r0, r2
 80059a2:	4798      	blx	r3
 80059a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059a6:	e00f      	b.n	80059c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa28 	bl	8005e00 <USBD_CtlError>
        err++;
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	3301      	adds	r3, #1
 80059b4:	72fb      	strb	r3, [r7, #11]
      break;
 80059b6:	e007      	b.n	80059c8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa20 	bl	8005e00 <USBD_CtlError>
      err++;
 80059c0:	7afb      	ldrb	r3, [r7, #11]
 80059c2:	3301      	adds	r3, #1
 80059c4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80059c6:	bf00      	nop
    }
    break;
 80059c8:	e037      	b.n	8005a3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7c1b      	ldrb	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	f107 0208 	add.w	r2, r7, #8
 80059de:	4610      	mov	r0, r2
 80059e0:	4798      	blx	r3
 80059e2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80059e4:	e029      	b.n	8005a3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa09 	bl	8005e00 <USBD_CtlError>
      err++;
 80059ee:	7afb      	ldrb	r3, [r7, #11]
 80059f0:	3301      	adds	r3, #1
 80059f2:	72fb      	strb	r3, [r7, #11]
    break;
 80059f4:	e021      	b.n	8005a3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7c1b      	ldrb	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10d      	bne.n	8005a1a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f107 0208 	add.w	r2, r7, #8
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4798      	blx	r3
 8005a0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	2207      	movs	r2, #7
 8005a16:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005a18:	e00f      	b.n	8005a3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f9ef 	bl	8005e00 <USBD_CtlError>
      err++;
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	3301      	adds	r3, #1
 8005a26:	72fb      	strb	r3, [r7, #11]
    break;
 8005a28:	e007      	b.n	8005a3a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f9e7 	bl	8005e00 <USBD_CtlError>
    err++;
 8005a32:	7afb      	ldrb	r3, [r7, #11]
 8005a34:	3301      	adds	r3, #1
 8005a36:	72fb      	strb	r3, [r7, #11]
    break;
 8005a38:	bf00      	nop
  }

  if (err != 0U)
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11e      	bne.n	8005a7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	88db      	ldrh	r3, [r3, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005a48:	893b      	ldrh	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00e      	beq.n	8005a6c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	88da      	ldrh	r2, [r3, #6]
 8005a52:	893b      	ldrh	r3, [r7, #8]
 8005a54:	4293      	cmp	r3, r2
 8005a56:	bf28      	it	cs
 8005a58:	4613      	movcs	r3, r2
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a5e:	893b      	ldrh	r3, [r7, #8]
 8005a60:	461a      	mov	r2, r3
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fa3c 	bl	8005ee2 <USBD_CtlSendData>
 8005a6a:	e009      	b.n	8005a80 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9c6 	bl	8005e00 <USBD_CtlError>
 8005a74:	e004      	b.n	8005a80 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa8d 	bl	8005f96 <USBD_CtlSendStatus>
 8005a7c:	e000      	b.n	8005a80 <USBD_GetDescriptor+0x2cc>
    return;
 8005a7e:	bf00      	nop
    }
  }
}
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop

08005a88 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	889b      	ldrh	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d130      	bne.n	8005afc <USBD_SetAddress+0x74>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	88db      	ldrh	r3, [r3, #6]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d12c      	bne.n	8005afc <USBD_SetAddress+0x74>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	885b      	ldrh	r3, [r3, #2]
 8005aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa8:	d828      	bhi.n	8005afc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	885b      	ldrh	r3, [r3, #2]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d104      	bne.n	8005aca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f99c 	bl	8005e00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac8:	e01c      	b.n	8005b04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7bfa      	ldrb	r2, [r7, #15]
 8005ace:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 fa5a 	bl	8006f90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fa5a 	bl	8005f96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af0:	e008      	b.n	8005b04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005afa:	e003      	b.n	8005b04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f97e 	bl	8005e00 <USBD_CtlError>
  }
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	885b      	ldrh	r3, [r3, #2]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	4b4b      	ldr	r3, [pc, #300]	; (8005c50 <USBD_SetConfig+0x144>)
 8005b22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005b24:	4b4a      	ldr	r3, [pc, #296]	; (8005c50 <USBD_SetConfig+0x144>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d905      	bls.n	8005b38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f966 	bl	8005e00 <USBD_CtlError>
    return USBD_FAIL;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e087      	b.n	8005c48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d002      	beq.n	8005b48 <USBD_SetConfig+0x3c>
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d025      	beq.n	8005b92 <USBD_SetConfig+0x86>
 8005b46:	e071      	b.n	8005c2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005b48:	4b41      	ldr	r3, [pc, #260]	; (8005c50 <USBD_SetConfig+0x144>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01c      	beq.n	8005b8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005b50:	4b3f      	ldr	r3, [pc, #252]	; (8005c50 <USBD_SetConfig+0x144>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b5a:	4b3d      	ldr	r3, [pc, #244]	; (8005c50 <USBD_SetConfig+0x144>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff f9a7 	bl	8004eb4 <USBD_SetClassConfig>
 8005b66:	4603      	mov	r3, r0
 8005b68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f944 	bl	8005e00 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005b78:	e065      	b.n	8005c46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa0b 	bl	8005f96 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005b88:	e05d      	b.n	8005c46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa03 	bl	8005f96 <USBD_CtlSendStatus>
    break;
 8005b90:	e059      	b.n	8005c46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <USBD_SetConfig+0x144>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d112      	bne.n	8005bc0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005ba2:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <USBD_SetConfig+0x144>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005bac:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <USBD_SetConfig+0x144>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff f99a 	bl	8004eec <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f9ec 	bl	8005f96 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005bbe:	e042      	b.n	8005c46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005bc0:	4b23      	ldr	r3, [pc, #140]	; (8005c50 <USBD_SetConfig+0x144>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d02a      	beq.n	8005c24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff f988 	bl	8004eec <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005bdc:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <USBD_SetConfig+0x144>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <USBD_SetConfig+0x144>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff f961 	bl	8004eb4 <USBD_SetClassConfig>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00f      	beq.n	8005c1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f8fe 	bl	8005e00 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff f96d 	bl	8004eec <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005c1a:	e014      	b.n	8005c46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f9ba 	bl	8005f96 <USBD_CtlSendStatus>
    break;
 8005c22:	e010      	b.n	8005c46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f9b6 	bl	8005f96 <USBD_CtlSendStatus>
    break;
 8005c2a:	e00c      	b.n	8005c46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8e6 	bl	8005e00 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <USBD_SetConfig+0x144>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff f956 	bl	8004eec <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005c40:	2303      	movs	r3, #3
 8005c42:	73fb      	strb	r3, [r7, #15]
    break;
 8005c44:	bf00      	nop
  }

  return ret;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000036c 	.word	0x2000036c

08005c54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	88db      	ldrh	r3, [r3, #6]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d004      	beq.n	8005c70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f8c9 	bl	8005e00 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005c6e:	e021      	b.n	8005cb4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	db17      	blt.n	8005caa <USBD_GetConfig+0x56>
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	dd02      	ble.n	8005c84 <USBD_GetConfig+0x30>
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d00b      	beq.n	8005c9a <USBD_GetConfig+0x46>
 8005c82:	e012      	b.n	8005caa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f925 	bl	8005ee2 <USBD_CtlSendData>
      break;
 8005c98:	e00c      	b.n	8005cb4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f91d 	bl	8005ee2 <USBD_CtlSendData>
      break;
 8005ca8:	e004      	b.n	8005cb4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f8a7 	bl	8005e00 <USBD_CtlError>
      break;
 8005cb2:	bf00      	nop
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d81e      	bhi.n	8005d10 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	88db      	ldrh	r3, [r3, #6]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d004      	beq.n	8005ce4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f88f 	bl	8005e00 <USBD_CtlError>
      break;
 8005ce2:	e01a      	b.n	8005d1a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f043 0202 	orr.w	r2, r3, #2
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	330c      	adds	r3, #12
 8005d04:	2202      	movs	r2, #2
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8ea 	bl	8005ee2 <USBD_CtlSendData>
    break;
 8005d0e:	e004      	b.n	8005d1a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f874 	bl	8005e00 <USBD_CtlError>
    break;
 8005d18:	bf00      	nop
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	885b      	ldrh	r3, [r3, #2]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d106      	bne.n	8005d42 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f92a 	bl	8005f96 <USBD_CtlSendStatus>
  }
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d80b      	bhi.n	8005d78 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	885b      	ldrh	r3, [r3, #2]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10c      	bne.n	8005d82 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f910 	bl	8005f96 <USBD_CtlSendStatus>
      }
      break;
 8005d76:	e004      	b.n	8005d82 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f840 	bl	8005e00 <USBD_CtlError>
      break;
 8005d80:	e000      	b.n	8005d84 <USBD_ClrFeature+0x3a>
      break;
 8005d82:	bf00      	nop
  }
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	781a      	ldrb	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff fad3 	bl	8005362 <SWAPBYTE>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fac6 	bl	8005362 <SWAPBYTE>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff fab9 	bl	8005362 <SWAPBYTE>
 8005df0:	4603      	mov	r3, r0
 8005df2:	461a      	mov	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	80da      	strh	r2, [r3, #6]
}
 8005df8:	bf00      	nop
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 f855 	bl	8006ebc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e12:	2100      	movs	r1, #0
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 f851 	bl	8006ebc <USBD_LL_StallEP>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d036      	beq.n	8005ea6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005e3c:	6938      	ldr	r0, [r7, #16]
 8005e3e:	f000 f836 	bl	8005eae <USBD_GetLen>
 8005e42:	4603      	mov	r3, r0
 8005e44:	3301      	adds	r3, #1
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	4413      	add	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	7812      	ldrb	r2, [r2, #0]
 8005e5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	4413      	add	r3, r2
 8005e68:	2203      	movs	r2, #3
 8005e6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005e72:	e013      	b.n	8005e9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	7812      	ldrb	r2, [r2, #0]
 8005e7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	3301      	adds	r3, #1
 8005e84:	613b      	str	r3, [r7, #16]
    idx++;
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
    idx++;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e7      	bne.n	8005e74 <USBD_GetString+0x52>
 8005ea4:	e000      	b.n	8005ea8 <USBD_GetString+0x86>
    return;
 8005ea6:	bf00      	nop
  }
}
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005ebe:	e005      	b.n	8005ecc <USBD_GetLen+0x1e>
  {
    len++;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f5      	bne.n	8005ec0 <USBD_GetLen+0x12>
  }

  return len;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	2100      	movs	r1, #0
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f001 f860 	bl	8006fce <USBD_LL_Transmit>

  return USBD_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f001 f84f 	bl	8006fce <USBD_LL_Transmit>

  return USBD_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	2100      	movs	r1, #0
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f001 f853 	bl	8007010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	2100      	movs	r1, #0
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f001 f842 	bl	8007010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2100      	movs	r1, #0
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 f80e 	bl	8006fce <USBD_LL_Transmit>

  return USBD_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 f81c 	bl	8007010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <Motor1_set>:
#include "HAL_STM32_USB.h"
#include "HAL_STM32_PWM.h"
#include "HAL_STM32_CONTROL.h"

void Motor1_set(uint32_t Dir, uint32_t Power)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	if(Dir == 0)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <Motor1_set+0x24>
	{
		HAL_GPIO_WritePin(MOT1_DIR1_PIN,MOT1_DIR1_PIN,RESET);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2108      	movs	r1, #8
 8005ff8:	2008      	movs	r0, #8
 8005ffa:	f7fa fd9b 	bl	8000b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT1_DIR2_PORT,MOT1_DIR2_PIN,RESET);
 8005ffe:	2200      	movs	r2, #0
 8006000:	2110      	movs	r1, #16
 8006002:	4812      	ldr	r0, [pc, #72]	; (800604c <Motor1_set+0x68>)
 8006004:	f7fa fd96 	bl	8000b34 <HAL_GPIO_WritePin>
	}
	if(Dir == 1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d109      	bne.n	8006022 <Motor1_set+0x3e>
	{
		HAL_GPIO_WritePin(MOT1_DIR1_PORT,MOT1_DIR1_PIN,SET);
 800600e:	2201      	movs	r2, #1
 8006010:	2108      	movs	r1, #8
 8006012:	480e      	ldr	r0, [pc, #56]	; (800604c <Motor1_set+0x68>)
 8006014:	f7fa fd8e 	bl	8000b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT1_DIR2_PORT,MOT1_DIR2_PIN,RESET);
 8006018:	2200      	movs	r2, #0
 800601a:	2110      	movs	r1, #16
 800601c:	480b      	ldr	r0, [pc, #44]	; (800604c <Motor1_set+0x68>)
 800601e:	f7fa fd89 	bl	8000b34 <HAL_GPIO_WritePin>
	}
	if(Dir == 2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d109      	bne.n	800603c <Motor1_set+0x58>
	{
		HAL_GPIO_WritePin(MOT1_DIR1_PORT,MOT1_DIR1_PIN,RESET);
 8006028:	2200      	movs	r2, #0
 800602a:	2108      	movs	r1, #8
 800602c:	4807      	ldr	r0, [pc, #28]	; (800604c <Motor1_set+0x68>)
 800602e:	f7fa fd81 	bl	8000b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT1_DIR2_PORT,MOT1_DIR2_PIN,SET);
 8006032:	2201      	movs	r2, #1
 8006034:	2110      	movs	r1, #16
 8006036:	4805      	ldr	r0, [pc, #20]	; (800604c <Motor1_set+0x68>)
 8006038:	f7fa fd7c 	bl	8000b34 <HAL_GPIO_WritePin>
	}
	HAL_STM32_SetPWMDuty1(Power);
 800603c:	6838      	ldr	r0, [r7, #0]
 800603e:	f000 f855 	bl	80060ec <HAL_STM32_SetPWMDuty1>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40020000 	.word	0x40020000

08006050 <Motor2_set>:

void Motor2_set(uint32_t Dir, uint32_t Power)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
	if(Dir == 0)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <Motor2_set+0x24>
	{
		HAL_GPIO_WritePin(MOT2_DIR1_PIN,MOT2_DIR1_PIN,RESET);
 8006060:	2200      	movs	r2, #0
 8006062:	2120      	movs	r1, #32
 8006064:	2020      	movs	r0, #32
 8006066:	f7fa fd65 	bl	8000b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT2_DIR2_PORT,MOT2_DIR2_PIN,RESET);
 800606a:	2200      	movs	r2, #0
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	4812      	ldr	r0, [pc, #72]	; (80060b8 <Motor2_set+0x68>)
 8006070:	f7fa fd60 	bl	8000b34 <HAL_GPIO_WritePin>
	}
	if(Dir == 1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d109      	bne.n	800608e <Motor2_set+0x3e>
	{
		HAL_GPIO_WritePin(MOT2_DIR1_PORT,MOT2_DIR1_PIN,SET);
 800607a:	2201      	movs	r2, #1
 800607c:	2120      	movs	r1, #32
 800607e:	480e      	ldr	r0, [pc, #56]	; (80060b8 <Motor2_set+0x68>)
 8006080:	f7fa fd58 	bl	8000b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT2_DIR2_PORT,MOT2_DIR2_PIN,RESET);
 8006084:	2200      	movs	r2, #0
 8006086:	2140      	movs	r1, #64	; 0x40
 8006088:	480b      	ldr	r0, [pc, #44]	; (80060b8 <Motor2_set+0x68>)
 800608a:	f7fa fd53 	bl	8000b34 <HAL_GPIO_WritePin>
	}
	if(Dir == 2)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d109      	bne.n	80060a8 <Motor2_set+0x58>
	{
		HAL_GPIO_WritePin(MOT2_DIR1_PORT,MOT2_DIR1_PIN,RESET);
 8006094:	2200      	movs	r2, #0
 8006096:	2120      	movs	r1, #32
 8006098:	4807      	ldr	r0, [pc, #28]	; (80060b8 <Motor2_set+0x68>)
 800609a:	f7fa fd4b 	bl	8000b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT2_DIR2_PORT,MOT2_DIR2_PIN,SET);
 800609e:	2201      	movs	r2, #1
 80060a0:	2140      	movs	r1, #64	; 0x40
 80060a2:	4805      	ldr	r0, [pc, #20]	; (80060b8 <Motor2_set+0x68>)
 80060a4:	f7fa fd46 	bl	8000b34 <HAL_GPIO_WritePin>
	}
	HAL_STM32_SetPWMDuty2(Power);
 80060a8:	6838      	ldr	r0, [r7, #0]
 80060aa:	f000 f82f 	bl	800610c <HAL_STM32_SetPWMDuty2>
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40020000 	.word	0x40020000

080060bc <HAL_STM32_InitPWM>:
 *      Author: TOSHIBA
 */
#include "HAL_STM32_PWM.h"

void HAL_STM32_InitPWM(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 80060c0:	f000 fafc 	bl	80066bc <MX_TIM4_Init>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80060c4:	2100      	movs	r1, #0
 80060c6:	4807      	ldr	r0, [pc, #28]	; (80060e4 <HAL_STM32_InitPWM+0x28>)
 80060c8:	f7fc fb56 	bl	8002778 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80060cc:	2104      	movs	r1, #4
 80060ce:	4805      	ldr	r0, [pc, #20]	; (80060e4 <HAL_STM32_InitPWM+0x28>)
 80060d0:	f7fc fb52 	bl	8002778 <HAL_TIM_PWM_Start>
	TIM4->CCR2 = 0;
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <HAL_STM32_InitPWM+0x2c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = 0;
 80060da:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <HAL_STM32_InitPWM+0x2c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80060e0:	bf00      	nop
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20005394 	.word	0x20005394
 80060e8:	40000800 	.word	0x40000800

080060ec <HAL_STM32_SetPWMDuty1>:
void HAL_STM32_SetPWMDuty1(uint32_t Duty)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	TIM4->CCR1 = Duty;
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <HAL_STM32_SetPWMDuty1+0x1c>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40000800 	.word	0x40000800

0800610c <HAL_STM32_SetPWMDuty2>:

void HAL_STM32_SetPWMDuty2(uint32_t Duty)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	TIM4->CCR2 = Duty;
 8006114:	4a04      	ldr	r2, [pc, #16]	; (8006128 <HAL_STM32_SetPWMDuty2+0x1c>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6393      	str	r3, [r2, #56]	; 0x38
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40000800 	.word	0x40000800

0800612c <HAL_STM32_USB_DEVICE_Init>:
 */

#include "HAL_STM32_USB.h"

void HAL_STM32_USB_DEVICE_Init(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 8006130:	f000 fba0 	bl	8006874 <MX_USB_DEVICE_Init>
}
 8006134:	bf00      	nop
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_STM32_VCP_retrieveInputData>:
{
	return CDC_Transmit_FS(Buf,Len);
}

uint8_t HAL_STM32_VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	return VCP_retrieveInputData(Buf, Len);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fc77 	bl	8006a38 <VCP_retrieveInputData>
 800614a:	4603      	mov	r3, r0
 800614c:	b2db      	uxtb	r3, r3
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800615e:	f107 0314 	add.w	r3, r7, #20
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	609a      	str	r2, [r3, #8]
 800616a:	60da      	str	r2, [r3, #12]
 800616c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	4a31      	ldr	r2, [pc, #196]	; (8006238 <MX_GPIO_Init+0xe0>)
 8006174:	4b30      	ldr	r3, [pc, #192]	; (8006238 <MX_GPIO_Init+0xe0>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	f043 0304 	orr.w	r3, r3, #4
 800617c:	6313      	str	r3, [r2, #48]	; 0x30
 800617e:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <MX_GPIO_Init+0xe0>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	4a2a      	ldr	r2, [pc, #168]	; (8006238 <MX_GPIO_Init+0xe0>)
 8006190:	4b29      	ldr	r3, [pc, #164]	; (8006238 <MX_GPIO_Init+0xe0>)
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006198:	6313      	str	r3, [r2, #48]	; 0x30
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <MX_GPIO_Init+0xe0>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a6:	2300      	movs	r3, #0
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	4a23      	ldr	r2, [pc, #140]	; (8006238 <MX_GPIO_Init+0xe0>)
 80061ac:	4b22      	ldr	r3, [pc, #136]	; (8006238 <MX_GPIO_Init+0xe0>)
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	6313      	str	r3, [r2, #48]	; 0x30
 80061b6:	4b20      	ldr	r3, [pc, #128]	; (8006238 <MX_GPIO_Init+0xe0>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061c2:	2300      	movs	r3, #0
 80061c4:	607b      	str	r3, [r7, #4]
 80061c6:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <MX_GPIO_Init+0xe0>)
 80061c8:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <MX_GPIO_Init+0xe0>)
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	6313      	str	r3, [r2, #48]	; 0x30
 80061d2:	4b19      	ldr	r3, [pc, #100]	; (8006238 <MX_GPIO_Init+0xe0>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 80061de:	2200      	movs	r2, #0
 80061e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061e4:	4815      	ldr	r0, [pc, #84]	; (800623c <MX_GPIO_Init+0xe4>)
 80061e6:	f7fa fca5 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_A_Pin|M1_B_Pin|M2_A_Pin|M2_B_Pin, GPIO_PIN_RESET);
 80061ea:	2200      	movs	r2, #0
 80061ec:	2178      	movs	r1, #120	; 0x78
 80061ee:	4814      	ldr	r0, [pc, #80]	; (8006240 <MX_GPIO_Init+0xe8>)
 80061f0:	f7fa fca0 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 80061f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061fa:	2301      	movs	r3, #1
 80061fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006202:	2300      	movs	r3, #0
 8006204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8006206:	f107 0314 	add.w	r3, r7, #20
 800620a:	4619      	mov	r1, r3
 800620c:	480b      	ldr	r0, [pc, #44]	; (800623c <MX_GPIO_Init+0xe4>)
 800620e:	f7fa fb0f 	bl	8000830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = M1_A_Pin|M1_B_Pin|M2_A_Pin|M2_B_Pin;
 8006212:	2378      	movs	r3, #120	; 0x78
 8006214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006216:	2301      	movs	r3, #1
 8006218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800621e:	2300      	movs	r3, #0
 8006220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006222:	f107 0314 	add.w	r3, r7, #20
 8006226:	4619      	mov	r1, r3
 8006228:	4805      	ldr	r0, [pc, #20]	; (8006240 <MX_GPIO_Init+0xe8>)
 800622a:	f7fa fb01 	bl	8000830 <HAL_GPIO_Init>

}
 800622e:	bf00      	nop
 8006230:	3728      	adds	r7, #40	; 0x28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40023800 	.word	0x40023800
 800623c:	40020800 	.word	0x40020800
 8006240:	40020000 	.word	0x40020000

08006244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char Buffer[10];
	uint32_t Len32 = 10;
 800624a:	230a      	movs	r3, #10
 800624c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */
	uint32_t Timeout = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
	//uint32_t Dir = 0;
	uint32_t Pow = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
	char *ptr;
  /* MCU Configuration--------------------------------------------------------*/
	Sys_state Estado_sistema = SYS_READY;
 8006256:	2303      	movs	r3, #3
 8006258:	76fb      	strb	r3, [r7, #27]

	Buffer[0] = 'R';
 800625a:	2352      	movs	r3, #82	; 0x52
 800625c:	723b      	strb	r3, [r7, #8]
	Buffer[1] = 'D';
 800625e:	2344      	movs	r3, #68	; 0x44
 8006260:	727b      	strb	r3, [r7, #9]
	Buffer[2] = 'Y';
 8006262:	2359      	movs	r3, #89	; 0x59
 8006264:	72bb      	strb	r3, [r7, #10]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006266:	f000 f917 	bl	8006498 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  HAL_Init();
 800626a:	f7fa f93d 	bl	80004e8 <HAL_Init>
  MX_GPIO_Init();
 800626e:	f7ff ff73 	bl	8006158 <MX_GPIO_Init>
  HAL_STM32_InitPWM();  //pwm init
 8006272:	f7ff ff23 	bl	80060bc <HAL_STM32_InitPWM>
  HAL_STM32_USB_DEVICE_Init();
 8006276:	f7ff ff59 	bl	800612c <HAL_STM32_USB_DEVICE_Init>
  /* Initialize all configured peripherals */
  HAL_Delay(100);
 800627a:	2064      	movs	r0, #100	; 0x64
 800627c:	f7fa f9a6 	bl	80005cc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_BOARD_PORT,LED_BOARD_PIN,SET);
 8006280:	2201      	movs	r2, #1
 8006282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006286:	4883      	ldr	r0, [pc, #524]	; (8006494 <main+0x250>)
 8006288:	f7fa fc54 	bl	8000b34 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  Motor1_set(0,0); //00
 800628c:	2100      	movs	r1, #0
 800628e:	2000      	movs	r0, #0
 8006290:	f7ff fea8 	bl	8005fe4 <Motor1_set>
  Motor2_set(0,0); //00
 8006294:	2100      	movs	r1, #0
 8006296:	2000      	movs	r0, #0
 8006298:	f7ff feda 	bl	8006050 <Motor2_set>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  switch(Estado_sistema)
 800629c:	7efb      	ldrb	r3, [r7, #27]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	f200 80ee 	bhi.w	8006480 <main+0x23c>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <main+0x68>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	08006481 	.word	0x08006481
 80062b0:	08006391 	.word	0x08006391
 80062b4:	08006481 	.word	0x08006481
 80062b8:	080062bd 	.word	0x080062bd
	  {
	  case SYS_READY:
		  //espera de instrucciones
		  if(HAL_STM32_VCP_retrieveInputData((uint8_t *)Buffer,&Len32)!=0)
 80062bc:	1d3a      	adds	r2, r7, #4
 80062be:	f107 0308 	add.w	r3, r7, #8
 80062c2:	4611      	mov	r1, r2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff ff37 	bl	8006138 <HAL_STM32_VCP_retrieveInputData>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80d9 	beq.w	8006484 <main+0x240>
		  {
			  if(Buffer[0] == 'R' && Buffer[1] == 'D' && Buffer[2] == 'Y')
 80062d2:	7a3b      	ldrb	r3, [r7, #8]
 80062d4:	2b52      	cmp	r3, #82	; 0x52
 80062d6:	d10d      	bne.n	80062f4 <main+0xb0>
 80062d8:	7a7b      	ldrb	r3, [r7, #9]
 80062da:	2b44      	cmp	r3, #68	; 0x44
 80062dc:	d10a      	bne.n	80062f4 <main+0xb0>
 80062de:	7abb      	ldrb	r3, [r7, #10]
 80062e0:	2b59      	cmp	r3, #89	; 0x59
 80062e2:	d107      	bne.n	80062f4 <main+0xb0>
			  {
				//instruccion de inicio
				  Motor1_set(0,0); //00
 80062e4:	2100      	movs	r1, #0
 80062e6:	2000      	movs	r0, #0
 80062e8:	f7ff fe7c 	bl	8005fe4 <Motor1_set>
				  Motor2_set(0,0);
 80062ec:	2100      	movs	r1, #0
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7ff feae 	bl	8006050 <Motor2_set>
			  }
			  if(Buffer[0] == 'M' && Buffer[1] == 'O' && Buffer[2] == 'T')
 80062f4:	7a3b      	ldrb	r3, [r7, #8]
 80062f6:	2b4d      	cmp	r3, #77	; 0x4d
 80062f8:	d135      	bne.n	8006366 <main+0x122>
 80062fa:	7a7b      	ldrb	r3, [r7, #9]
 80062fc:	2b4f      	cmp	r3, #79	; 0x4f
 80062fe:	d132      	bne.n	8006366 <main+0x122>
 8006300:	7abb      	ldrb	r3, [r7, #10]
 8006302:	2b54      	cmp	r3, #84	; 0x54
 8006304:	d12f      	bne.n	8006366 <main+0x122>
			  {
				//instruccion de motor

				  Pow = strtol(&Buffer[5],&ptr,10);
 8006306:	4639      	mov	r1, r7
 8006308:	f107 0308 	add.w	r3, r7, #8
 800630c:	3305      	adds	r3, #5
 800630e:	220a      	movs	r2, #10
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f99f 	bl	8007654 <strtol>
 8006316:	4603      	mov	r3, r0
 8006318:	617b      	str	r3, [r7, #20]
				  //Pow = atoi(Buffer);
				  if(Buffer[3] == 'A')
 800631a:	7afb      	ldrb	r3, [r7, #11]
 800631c:	2b41      	cmp	r3, #65	; 0x41
 800631e:	d10d      	bne.n	800633c <main+0xf8>
				  {
					  if(Buffer[4] == 'F') Motor1_set(1,Pow);
 8006320:	7b3b      	ldrb	r3, [r7, #12]
 8006322:	2b46      	cmp	r3, #70	; 0x46
 8006324:	d103      	bne.n	800632e <main+0xea>
 8006326:	6979      	ldr	r1, [r7, #20]
 8006328:	2001      	movs	r0, #1
 800632a:	f7ff fe5b 	bl	8005fe4 <Motor1_set>
					  if(Buffer[4] == 'R') Motor1_set(2,Pow);
 800632e:	7b3b      	ldrb	r3, [r7, #12]
 8006330:	2b52      	cmp	r3, #82	; 0x52
 8006332:	d103      	bne.n	800633c <main+0xf8>
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	2002      	movs	r0, #2
 8006338:	f7ff fe54 	bl	8005fe4 <Motor1_set>
				  }

				  if(Buffer[3] == 'B')
 800633c:	7afb      	ldrb	r3, [r7, #11]
 800633e:	2b42      	cmp	r3, #66	; 0x42
 8006340:	d10d      	bne.n	800635e <main+0x11a>
				  {
					  if(Buffer[4] == 'F') Motor2_set(1,Pow);
 8006342:	7b3b      	ldrb	r3, [r7, #12]
 8006344:	2b46      	cmp	r3, #70	; 0x46
 8006346:	d103      	bne.n	8006350 <main+0x10c>
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	2001      	movs	r0, #1
 800634c:	f7ff fe80 	bl	8006050 <Motor2_set>
					  if(Buffer[4] == 'R') Motor2_set(2,Pow);
 8006350:	7b3b      	ldrb	r3, [r7, #12]
 8006352:	2b52      	cmp	r3, #82	; 0x52
 8006354:	d103      	bne.n	800635e <main+0x11a>
 8006356:	6979      	ldr	r1, [r7, #20]
 8006358:	2002      	movs	r0, #2
 800635a:	f7ff fe79 	bl	8006050 <Motor2_set>
				  }
				  Timeout = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
				  Estado_sistema = SYS_BUSY;
 8006362:	2301      	movs	r3, #1
 8006364:	76fb      	strb	r3, [r7, #27]
			  }
			  if(Buffer[0] == 'B' && Buffer[1] == 'R' && Buffer[2] == 'K')
 8006366:	7a3b      	ldrb	r3, [r7, #8]
 8006368:	2b42      	cmp	r3, #66	; 0x42
 800636a:	f040 808b 	bne.w	8006484 <main+0x240>
 800636e:	7a7b      	ldrb	r3, [r7, #9]
 8006370:	2b52      	cmp	r3, #82	; 0x52
 8006372:	f040 8087 	bne.w	8006484 <main+0x240>
 8006376:	7abb      	ldrb	r3, [r7, #10]
 8006378:	2b4b      	cmp	r3, #75	; 0x4b
 800637a:	f040 8083 	bne.w	8006484 <main+0x240>
			  {
				//instruccion de freno
				  Motor1_set(0,0); //00
 800637e:	2100      	movs	r1, #0
 8006380:	2000      	movs	r0, #0
 8006382:	f7ff fe2f 	bl	8005fe4 <Motor1_set>
				  Motor2_set(0,0); //00
 8006386:	2100      	movs	r1, #0
 8006388:	2000      	movs	r0, #0
 800638a:	f7ff fe61 	bl	8006050 <Motor2_set>
			  }
		  }
		  break;
 800638e:	e079      	b.n	8006484 <main+0x240>

	  case SYS_BUSY:
		  Timeout ++;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3301      	adds	r3, #1
 8006394:	61fb      	str	r3, [r7, #28]
		  if(HAL_STM32_VCP_retrieveInputData((uint8_t *)Buffer,&Len32)!=0)
 8006396:	1d3a      	adds	r2, r7, #4
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff feca 	bl	8006138 <HAL_STM32_VCP_retrieveInputData>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d05a      	beq.n	8006460 <main+0x21c>
		  {
			  if(Buffer[0] == 'R' && Buffer[1] == 'D' && Buffer[2] == 'Y')
 80063aa:	7a3b      	ldrb	r3, [r7, #8]
 80063ac:	2b52      	cmp	r3, #82	; 0x52
 80063ae:	d10d      	bne.n	80063cc <main+0x188>
 80063b0:	7a7b      	ldrb	r3, [r7, #9]
 80063b2:	2b44      	cmp	r3, #68	; 0x44
 80063b4:	d10a      	bne.n	80063cc <main+0x188>
 80063b6:	7abb      	ldrb	r3, [r7, #10]
 80063b8:	2b59      	cmp	r3, #89	; 0x59
 80063ba:	d107      	bne.n	80063cc <main+0x188>
			  {
				//instruccion de inicio
				  Motor1_set(0,0); //00
 80063bc:	2100      	movs	r1, #0
 80063be:	2000      	movs	r0, #0
 80063c0:	f7ff fe10 	bl	8005fe4 <Motor1_set>
				  Motor2_set(0,0);
 80063c4:	2100      	movs	r1, #0
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7ff fe42 	bl	8006050 <Motor2_set>
			  }
			  if(Buffer[0] == 'M' && Buffer[1] == 'O' && Buffer[2] == 'T')
 80063cc:	7a3b      	ldrb	r3, [r7, #8]
 80063ce:	2b4d      	cmp	r3, #77	; 0x4d
 80063d0:	d135      	bne.n	800643e <main+0x1fa>
 80063d2:	7a7b      	ldrb	r3, [r7, #9]
 80063d4:	2b4f      	cmp	r3, #79	; 0x4f
 80063d6:	d132      	bne.n	800643e <main+0x1fa>
 80063d8:	7abb      	ldrb	r3, [r7, #10]
 80063da:	2b54      	cmp	r3, #84	; 0x54
 80063dc:	d12f      	bne.n	800643e <main+0x1fa>
			  {
					//instruccion de motor

					  Pow = strtol(&Buffer[5],&ptr,10);
 80063de:	4639      	mov	r1, r7
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	3305      	adds	r3, #5
 80063e6:	220a      	movs	r2, #10
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f933 	bl	8007654 <strtol>
 80063ee:	4603      	mov	r3, r0
 80063f0:	617b      	str	r3, [r7, #20]
					  //Pow = atoi(Buffer);
					  if(Buffer[3] == 'A')
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	2b41      	cmp	r3, #65	; 0x41
 80063f6:	d10d      	bne.n	8006414 <main+0x1d0>
					  {
						  if(Buffer[4] == 'F') Motor1_set(1,Pow);
 80063f8:	7b3b      	ldrb	r3, [r7, #12]
 80063fa:	2b46      	cmp	r3, #70	; 0x46
 80063fc:	d103      	bne.n	8006406 <main+0x1c2>
 80063fe:	6979      	ldr	r1, [r7, #20]
 8006400:	2001      	movs	r0, #1
 8006402:	f7ff fdef 	bl	8005fe4 <Motor1_set>
						  if(Buffer[4] == 'R') Motor1_set(2,Pow);
 8006406:	7b3b      	ldrb	r3, [r7, #12]
 8006408:	2b52      	cmp	r3, #82	; 0x52
 800640a:	d103      	bne.n	8006414 <main+0x1d0>
 800640c:	6979      	ldr	r1, [r7, #20]
 800640e:	2002      	movs	r0, #2
 8006410:	f7ff fde8 	bl	8005fe4 <Motor1_set>
					  }

					  if(Buffer[3] == 'B')
 8006414:	7afb      	ldrb	r3, [r7, #11]
 8006416:	2b42      	cmp	r3, #66	; 0x42
 8006418:	d10d      	bne.n	8006436 <main+0x1f2>
					  {
						  if(Buffer[4] == 'F') Motor2_set(1,Pow);
 800641a:	7b3b      	ldrb	r3, [r7, #12]
 800641c:	2b46      	cmp	r3, #70	; 0x46
 800641e:	d103      	bne.n	8006428 <main+0x1e4>
 8006420:	6979      	ldr	r1, [r7, #20]
 8006422:	2001      	movs	r0, #1
 8006424:	f7ff fe14 	bl	8006050 <Motor2_set>
						  if(Buffer[4] == 'R') Motor2_set(2,Pow);
 8006428:	7b3b      	ldrb	r3, [r7, #12]
 800642a:	2b52      	cmp	r3, #82	; 0x52
 800642c:	d103      	bne.n	8006436 <main+0x1f2>
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	2002      	movs	r0, #2
 8006432:	f7ff fe0d 	bl	8006050 <Motor2_set>
					  }
					  Timeout = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
					  Estado_sistema = SYS_BUSY;
 800643a:	2301      	movs	r3, #1
 800643c:	76fb      	strb	r3, [r7, #27]
			  }
			  if(Buffer[0] == 'B' && Buffer[1] == 'R' && Buffer[2] == 'K')
 800643e:	7a3b      	ldrb	r3, [r7, #8]
 8006440:	2b42      	cmp	r3, #66	; 0x42
 8006442:	d10d      	bne.n	8006460 <main+0x21c>
 8006444:	7a7b      	ldrb	r3, [r7, #9]
 8006446:	2b52      	cmp	r3, #82	; 0x52
 8006448:	d10a      	bne.n	8006460 <main+0x21c>
 800644a:	7abb      	ldrb	r3, [r7, #10]
 800644c:	2b4b      	cmp	r3, #75	; 0x4b
 800644e:	d107      	bne.n	8006460 <main+0x21c>
			  {
				//instruccion de freno
				  Motor1_set(0,0); //00
 8006450:	2100      	movs	r1, #0
 8006452:	2000      	movs	r0, #0
 8006454:	f7ff fdc6 	bl	8005fe4 <Motor1_set>
				  Motor2_set(0,0); //00
 8006458:	2100      	movs	r1, #0
 800645a:	2000      	movs	r0, #0
 800645c:	f7ff fdf8 	bl	8006050 <Motor2_set>
			  }
		  }
		  if(Timeout > SYS_TIMEOUT)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b46      	cmp	r3, #70	; 0x46
 8006464:	d910      	bls.n	8006488 <main+0x244>
		  {
			  //instrucciones de frenado
			  Motor1_set(0,0); //00
 8006466:	2100      	movs	r1, #0
 8006468:	2000      	movs	r0, #0
 800646a:	f7ff fdbb 	bl	8005fe4 <Motor1_set>
			  Motor2_set(0,0);
 800646e:	2100      	movs	r1, #0
 8006470:	2000      	movs	r0, #0
 8006472:	f7ff fded 	bl	8006050 <Motor2_set>
			  Timeout = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
			  Estado_sistema = SYS_READY;
 800647a:	2303      	movs	r3, #3
 800647c:	76fb      	strb	r3, [r7, #27]
		  }
		  //instruccion en ejecucion
		  break;
 800647e:	e003      	b.n	8006488 <main+0x244>
	  case SYS_ERROR:
		  //error
		  break;

	  default:
		  break;
 8006480:	bf00      	nop
 8006482:	e002      	b.n	800648a <main+0x246>
		  break;
 8006484:	bf00      	nop
 8006486:	e000      	b.n	800648a <main+0x246>
		  break;
 8006488:	bf00      	nop
	  }
	  HAL_Delay(3);
 800648a:	2003      	movs	r0, #3
 800648c:	f7fa f89e 	bl	80005cc <HAL_Delay>
	  switch(Estado_sistema)
 8006490:	e704      	b.n	800629c <main+0x58>
 8006492:	bf00      	nop
 8006494:	40020800 	.word	0x40020800

08006498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b094      	sub	sp, #80	; 0x50
 800649c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800649e:	f107 0320 	add.w	r3, r7, #32
 80064a2:	2230      	movs	r2, #48	; 0x30
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 ff8f 	bl	80073ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	609a      	str	r2, [r3, #8]
 80064b8:	60da      	str	r2, [r3, #12]
 80064ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80064bc:	2300      	movs	r3, #0
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	4a27      	ldr	r2, [pc, #156]	; (8006560 <SystemClock_Config+0xc8>)
 80064c2:	4b27      	ldr	r3, [pc, #156]	; (8006560 <SystemClock_Config+0xc8>)
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ca:	6413      	str	r3, [r2, #64]	; 0x40
 80064cc:	4b24      	ldr	r3, [pc, #144]	; (8006560 <SystemClock_Config+0xc8>)
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80064d8:	2300      	movs	r3, #0
 80064da:	607b      	str	r3, [r7, #4]
 80064dc:	4a21      	ldr	r2, [pc, #132]	; (8006564 <SystemClock_Config+0xcc>)
 80064de:	4b21      	ldr	r3, [pc, #132]	; (8006564 <SystemClock_Config+0xcc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <SystemClock_Config+0xcc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80064f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80064fe:	2302      	movs	r3, #2
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006508:	2319      	movs	r3, #25
 800650a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800650c:	23c0      	movs	r3, #192	; 0xc0
 800650e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006510:	2302      	movs	r3, #2
 8006512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006514:	2304      	movs	r3, #4
 8006516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006518:	f107 0320 	add.w	r3, r7, #32
 800651c:	4618      	mov	r0, r3
 800651e:	f7fb fcb3 	bl	8001e88 <HAL_RCC_OscConfig>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006528:	f000 f81e 	bl	8006568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800652c:	230f      	movs	r3, #15
 800652e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006530:	2302      	movs	r3, #2
 8006532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800653c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006542:	f107 030c 	add.w	r3, r7, #12
 8006546:	2103      	movs	r1, #3
 8006548:	4618      	mov	r0, r3
 800654a:	f7fb ff0d 	bl	8002368 <HAL_RCC_ClockConfig>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006554:	f000 f808 	bl	8006568 <Error_Handler>
  }
}
 8006558:	bf00      	nop
 800655a:	3750      	adds	r7, #80	; 0x50
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40023800 	.word	0x40023800
 8006564:	40007000 	.word	0x40007000

08006568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800657e:	2300      	movs	r3, #0
 8006580:	607b      	str	r3, [r7, #4]
 8006582:	4a10      	ldr	r2, [pc, #64]	; (80065c4 <HAL_MspInit+0x4c>)
 8006584:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <HAL_MspInit+0x4c>)
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800658c:	6453      	str	r3, [r2, #68]	; 0x44
 800658e:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <HAL_MspInit+0x4c>)
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006596:	607b      	str	r3, [r7, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <HAL_MspInit+0x4c>)
 80065a0:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <HAL_MspInit+0x4c>)
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a8:	6413      	str	r3, [r2, #64]	; 0x40
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <HAL_MspInit+0x4c>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800

080065c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065d6:	b480      	push	{r7}
 80065d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065da:	e7fe      	b.n	80065da <HardFault_Handler+0x4>

080065dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065e0:	e7fe      	b.n	80065e0 <MemManage_Handler+0x4>

080065e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065e2:	b480      	push	{r7}
 80065e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065e6:	e7fe      	b.n	80065e6 <BusFault_Handler+0x4>

080065e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065ec:	e7fe      	b.n	80065ec <UsageFault_Handler+0x4>

080065ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065ee:	b480      	push	{r7}
 80065f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800660e:	bf00      	nop
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800661c:	f7f9 ffb6 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006620:	bf00      	nop
 8006622:	bd80      	pop	{r7, pc}

08006624 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006628:	4802      	ldr	r0, [pc, #8]	; (8006634 <OTG_FS_IRQHandler+0x10>)
 800662a:	f7fa fbec 	bl	8000e06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200066a4 	.word	0x200066a4

08006638 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006640:	4b11      	ldr	r3, [pc, #68]	; (8006688 <_sbrk+0x50>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <_sbrk+0x16>
		heap_end = &end;
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <_sbrk+0x50>)
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <_sbrk+0x54>)
 800664c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800664e:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <_sbrk+0x50>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <_sbrk+0x50>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	466a      	mov	r2, sp
 800665e:	4293      	cmp	r3, r2
 8006660:	d907      	bls.n	8006672 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006662:	f000 fe6d 	bl	8007340 <__errno>
 8006666:	4602      	mov	r2, r0
 8006668:	230c      	movs	r3, #12
 800666a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800666c:	f04f 33ff 	mov.w	r3, #4294967295
 8006670:	e006      	b.n	8006680 <_sbrk+0x48>
	}

	heap_end += incr;
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <_sbrk+0x50>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	4a03      	ldr	r2, [pc, #12]	; (8006688 <_sbrk+0x50>)
 800667c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800667e:	68fb      	ldr	r3, [r7, #12]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000370 	.word	0x20000370
 800668c:	20006cb0 	.word	0x20006cb0

08006690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006694:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <SystemInit+0x28>)
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <SystemInit+0x28>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <SystemInit+0x28>)
 80066a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066aa:	609a      	str	r2, [r3, #8]
#endif
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	e000ed00 	.word	0xe000ed00

080066bc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08e      	sub	sp, #56	; 0x38
 80066c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066d0:	f107 0320 	add.w	r3, r7, #32
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066da:	1d3b      	adds	r3, r7, #4
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	609a      	str	r2, [r3, #8]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	611a      	str	r2, [r3, #16]
 80066e8:	615a      	str	r2, [r3, #20]
 80066ea:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80066ec:	4b31      	ldr	r3, [pc, #196]	; (80067b4 <MX_TIM4_Init+0xf8>)
 80066ee:	4a32      	ldr	r2, [pc, #200]	; (80067b8 <MX_TIM4_Init+0xfc>)
 80066f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 80066f2:	4b30      	ldr	r3, [pc, #192]	; (80067b4 <MX_TIM4_Init+0xf8>)
 80066f4:	225f      	movs	r2, #95	; 0x5f
 80066f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066f8:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <MX_TIM4_Init+0xf8>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80066fe:	4b2d      	ldr	r3, [pc, #180]	; (80067b4 <MX_TIM4_Init+0xf8>)
 8006700:	2263      	movs	r2, #99	; 0x63
 8006702:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006704:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <MX_TIM4_Init+0xf8>)
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800670a:	4b2a      	ldr	r3, [pc, #168]	; (80067b4 <MX_TIM4_Init+0xf8>)
 800670c:	2280      	movs	r2, #128	; 0x80
 800670e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006710:	4828      	ldr	r0, [pc, #160]	; (80067b4 <MX_TIM4_Init+0xf8>)
 8006712:	f7fb ffd1 	bl	80026b8 <HAL_TIM_Base_Init>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800671c:	f7ff ff24 	bl	8006568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800672a:	4619      	mov	r1, r3
 800672c:	4821      	ldr	r0, [pc, #132]	; (80067b4 <MX_TIM4_Init+0xf8>)
 800672e:	f7fc f91b 	bl	8002968 <HAL_TIM_ConfigClockSource>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8006738:	f7ff ff16 	bl	8006568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800673c:	481d      	ldr	r0, [pc, #116]	; (80067b4 <MX_TIM4_Init+0xf8>)
 800673e:	f7fb ffe6 	bl	800270e <HAL_TIM_PWM_Init>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8006748:	f7ff ff0e 	bl	8006568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800674c:	2300      	movs	r3, #0
 800674e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006750:	2300      	movs	r3, #0
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006754:	f107 0320 	add.w	r3, r7, #32
 8006758:	4619      	mov	r1, r3
 800675a:	4816      	ldr	r0, [pc, #88]	; (80067b4 <MX_TIM4_Init+0xf8>)
 800675c:	f7fc fc88 	bl	8003070 <HAL_TIMEx_MasterConfigSynchronization>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8006766:	f7ff feff 	bl	8006568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800676a:	2360      	movs	r3, #96	; 0x60
 800676c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	2200      	movs	r2, #0
 800677e:	4619      	mov	r1, r3
 8006780:	480c      	ldr	r0, [pc, #48]	; (80067b4 <MX_TIM4_Init+0xf8>)
 8006782:	f7fc f82b 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800678c:	f7ff feec 	bl	8006568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006790:	1d3b      	adds	r3, r7, #4
 8006792:	2204      	movs	r2, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4807      	ldr	r0, [pc, #28]	; (80067b4 <MX_TIM4_Init+0xf8>)
 8006798:	f7fc f820 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80067a2:	f7ff fee1 	bl	8006568 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80067a6:	4803      	ldr	r0, [pc, #12]	; (80067b4 <MX_TIM4_Init+0xf8>)
 80067a8:	f000 f82a 	bl	8006800 <HAL_TIM_MspPostInit>

}
 80067ac:	bf00      	nop
 80067ae:	3738      	adds	r7, #56	; 0x38
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20005394 	.word	0x20005394
 80067b8:	40000800 	.word	0x40000800

080067bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a0b      	ldr	r2, [pc, #44]	; (80067f8 <HAL_TIM_Base_MspInit+0x3c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d10d      	bne.n	80067ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <HAL_TIM_Base_MspInit+0x40>)
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_TIM_Base_MspInit+0x40>)
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	f043 0304 	orr.w	r3, r3, #4
 80067dc:	6413      	str	r3, [r2, #64]	; 0x40
 80067de:	4b07      	ldr	r3, [pc, #28]	; (80067fc <HAL_TIM_Base_MspInit+0x40>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40000800 	.word	0x40000800
 80067fc:	40023800 	.word	0x40023800

08006800 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a12      	ldr	r2, [pc, #72]	; (8006868 <HAL_TIM_MspPostInit+0x68>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d11d      	bne.n	800685e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	4a11      	ldr	r2, [pc, #68]	; (800686c <HAL_TIM_MspPostInit+0x6c>)
 8006828:	4b10      	ldr	r3, [pc, #64]	; (800686c <HAL_TIM_MspPostInit+0x6c>)
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	6313      	str	r3, [r2, #48]	; 0x30
 8006832:	4b0e      	ldr	r3, [pc, #56]	; (800686c <HAL_TIM_MspPostInit+0x6c>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800683e:	23c0      	movs	r3, #192	; 0xc0
 8006840:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006842:	2302      	movs	r3, #2
 8006844:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800684e:	2302      	movs	r3, #2
 8006850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006852:	f107 030c 	add.w	r3, r7, #12
 8006856:	4619      	mov	r1, r3
 8006858:	4805      	ldr	r0, [pc, #20]	; (8006870 <HAL_TIM_MspPostInit+0x70>)
 800685a:	f7f9 ffe9 	bl	8000830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800685e:	bf00      	nop
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40000800 	.word	0x40000800
 800686c:	40023800 	.word	0x40023800
 8006870:	40020400 	.word	0x40020400

08006874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006878:	2200      	movs	r2, #0
 800687a:	4912      	ldr	r1, [pc, #72]	; (80068c4 <MX_USB_DEVICE_Init+0x50>)
 800687c:	4812      	ldr	r0, [pc, #72]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 800687e:	f7fe faab 	bl	8004dd8 <USBD_Init>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006888:	f7ff fe6e 	bl	8006568 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800688c:	490f      	ldr	r1, [pc, #60]	; (80068cc <MX_USB_DEVICE_Init+0x58>)
 800688e:	480e      	ldr	r0, [pc, #56]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 8006890:	f7fe fad8 	bl	8004e44 <USBD_RegisterClass>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800689a:	f7ff fe65 	bl	8006568 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800689e:	490c      	ldr	r1, [pc, #48]	; (80068d0 <MX_USB_DEVICE_Init+0x5c>)
 80068a0:	4809      	ldr	r0, [pc, #36]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 80068a2:	f7fe fa2d 	bl	8004d00 <USBD_CDC_RegisterInterface>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80068ac:	f7ff fe5c 	bl	8006568 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068b0:	4805      	ldr	r0, [pc, #20]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 80068b2:	f7fe fae8 	bl	8004e86 <USBD_Start>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80068bc:	f7ff fe54 	bl	8006568 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068c0:	bf00      	nop
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000130 	.word	0x20000130
 80068c8:	200053d4 	.word	0x200053d4
 80068cc:	20000014 	.word	0x20000014
 80068d0:	2000011c 	.word	0x2000011c

080068d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068d8:	2200      	movs	r2, #0
 80068da:	4905      	ldr	r1, [pc, #20]	; (80068f0 <CDC_Init_FS+0x1c>)
 80068dc:	4805      	ldr	r0, [pc, #20]	; (80068f4 <CDC_Init_FS+0x20>)
 80068de:	f7fe fa24 	bl	8004d2a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80068e2:	4905      	ldr	r1, [pc, #20]	; (80068f8 <CDC_Init_FS+0x24>)
 80068e4:	4803      	ldr	r0, [pc, #12]	; (80068f4 <CDC_Init_FS+0x20>)
 80068e6:	f7fe fa39 	bl	8004d5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80068ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20005ea4 	.word	0x20005ea4
 80068f4:	200053d4 	.word	0x200053d4
 80068f8:	200056a4 	.word	0x200056a4

080068fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006900:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006902:	4618      	mov	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	6039      	str	r1, [r7, #0]
 8006916:	71fb      	strb	r3, [r7, #7]
 8006918:	4613      	mov	r3, r2
 800691a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	2b23      	cmp	r3, #35	; 0x23
 8006920:	d84a      	bhi.n	80069b8 <CDC_Control_FS+0xac>
 8006922:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <CDC_Control_FS+0x1c>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	080069b9 	.word	0x080069b9
 800692c:	080069b9 	.word	0x080069b9
 8006930:	080069b9 	.word	0x080069b9
 8006934:	080069b9 	.word	0x080069b9
 8006938:	080069b9 	.word	0x080069b9
 800693c:	080069b9 	.word	0x080069b9
 8006940:	080069b9 	.word	0x080069b9
 8006944:	080069b9 	.word	0x080069b9
 8006948:	080069b9 	.word	0x080069b9
 800694c:	080069b9 	.word	0x080069b9
 8006950:	080069b9 	.word	0x080069b9
 8006954:	080069b9 	.word	0x080069b9
 8006958:	080069b9 	.word	0x080069b9
 800695c:	080069b9 	.word	0x080069b9
 8006960:	080069b9 	.word	0x080069b9
 8006964:	080069b9 	.word	0x080069b9
 8006968:	080069b9 	.word	0x080069b9
 800696c:	080069b9 	.word	0x080069b9
 8006970:	080069b9 	.word	0x080069b9
 8006974:	080069b9 	.word	0x080069b9
 8006978:	080069b9 	.word	0x080069b9
 800697c:	080069b9 	.word	0x080069b9
 8006980:	080069b9 	.word	0x080069b9
 8006984:	080069b9 	.word	0x080069b9
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069b9 	.word	0x080069b9
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069b9 	.word	0x080069b9
 800699c:	080069b9 	.word	0x080069b9
 80069a0:	080069b9 	.word	0x080069b9
 80069a4:	080069b9 	.word	0x080069b9
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069b9 	.word	0x080069b9
 80069b0:	080069b9 	.word	0x080069b9
 80069b4:	080069b9 	.word	0x080069b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069b8:	bf00      	nop
  }

  return (USBD_OK);
 80069ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
		{
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
			CDC_Transmit_FS(dataOff,strlen(dataOff));
		}*/
		//CDC_Receive_FS is a callback function. When data were received, the system calls this function. The received data can be accessed via Buf,and *Len
		s_RxBuffers.IsCommandDataReceived=1; //indicates data were received
 80069d2:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <CDC_Receive_FS+0x68>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	721a      	strb	r2, [r3, #8]
		s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len; //only set the length, data was directly saved to buffer
 80069d8:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <CDC_Receive_FS+0x68>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	b2d1      	uxtb	r1, r2
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <CDC_Receive_FS+0x68>)
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80069ea:	3309      	adds	r3, #9
 80069ec:	460a      	mov	r2, r1
 80069ee:	701a      	strb	r2, [r3, #0]
		s_RxBuffers.pos_receive++; //move to next position to receive data
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <CDC_Receive_FS+0x68>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a0e      	ldr	r2, [pc, #56]	; (8006a30 <CDC_Receive_FS+0x68>)
 80069f8:	6013      	str	r3, [r2, #0]
		if(s_RxBuffers.pos_receive>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <CDC_Receive_FS+0x68>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	dd02      	ble.n	8006a08 <CDC_Receive_FS+0x40>
		{
			s_RxBuffers.pos_receive=0;
 8006a02:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <CDC_Receive_FS+0x68>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]

		//Buffer_struct.IsCommandDataReceived = 1;
		//Buffer_struct.CommandsLens = *Len;


		USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <CDC_Receive_FS+0x68>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	02db      	lsls	r3, r3, #11
 8006a0e:	3308      	adds	r3, #8
 8006a10:	4a07      	ldr	r2, [pc, #28]	; (8006a30 <CDC_Receive_FS+0x68>)
 8006a12:	4413      	add	r3, r2
 8006a14:	3301      	adds	r3, #1
 8006a16:	4619      	mov	r1, r3
 8006a18:	4806      	ldr	r0, [pc, #24]	; (8006a34 <CDC_Receive_FS+0x6c>)
 8006a1a:	f7fe f99f 	bl	8004d5c <USBD_CDC_SetRxBuffer>
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a1e:	4805      	ldr	r0, [pc, #20]	; (8006a34 <CDC_Receive_FS+0x6c>)
 8006a20:	f7fe f9b0 	bl	8004d84 <USBD_CDC_ReceivePacket>
		return (USBD_OK);
 8006a24:	2300      	movs	r3, #0
	  /* USER CODE END 6 */
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000374 	.word	0x20000374
 8006a34:	200053d4 	.word	0x200053d4

08006a38 <VCP_retrieveInputData>:
* @param Buf: Buffer of data to be received
* @param Len: Number of data received (in bytes)
* @retval 0 means no data was received.
*/
int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
	if(s_RxBuffers.IsCommandDataReceived==0)return 0; //no data received
 8006a42:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006a44:	7a1b      	ldrb	r3, [r3, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <VCP_retrieveInputData+0x16>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e034      	b.n	8006ab8 <VCP_retrieveInputData+0x80>
	int index=s_RxBuffers.pos_process;
 8006a4e:	4b1c      	ldr	r3, [pc, #112]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	60fb      	str	r3, [r7, #12]
	*Len=s_RxBuffers.CommandsLens[index]; //return the length
 8006a54:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8006a5e:	3309      	adds	r3, #9
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	601a      	str	r2, [r3, #0]
	memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	02db      	lsls	r3, r3, #11
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006a70:	4413      	add	r3, r2
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fc9a 	bl	80073b4 <memcpy>
	Buf[*Len]='\0'; //testing only. make sure there is ending char in the returned command string
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
					//check if all data were processed.
	s_RxBuffers.pos_process++;
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	3301      	adds	r3, #1
 8006a92:	4a0b      	ldr	r2, [pc, #44]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006a94:	6053      	str	r3, [r2, #4]
	if(s_RxBuffers.pos_process>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b09      	cmp	r3, #9
 8006a9c:	dd02      	ble.n	8006aa4 <VCP_retrieveInputData+0x6c>
	{
		s_RxBuffers.pos_process=0;
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]
	}
	if(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d102      	bne.n	8006ab6 <VCP_retrieveInputData+0x7e>
		s_RxBuffers.IsCommandDataReceived=0; //check if all data were processed
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <VCP_retrieveInputData+0x88>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	721a      	strb	r2, [r3, #8]

	return 1;
 8006ab6:	2301      	movs	r3, #1
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20000374 	.word	0x20000374

08006ac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af0:	f107 0314 	add.w	r3, r7, #20
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	605a      	str	r2, [r3, #4]
 8006afa:	609a      	str	r2, [r3, #8]
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b08:	d13a      	bne.n	8006b80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b10:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	6313      	str	r3, [r2, #48]	; 0x30
 8006b1a:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b34:	2303      	movs	r3, #3
 8006b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b38:	230a      	movs	r3, #10
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b3c:	f107 0314 	add.w	r3, r7, #20
 8006b40:	4619      	mov	r1, r3
 8006b42:	4812      	ldr	r0, [pc, #72]	; (8006b8c <HAL_PCD_MspInit+0xa4>)
 8006b44:	f7f9 fe74 	bl	8000830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b48:	4a0f      	ldr	r2, [pc, #60]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b52:	6353      	str	r3, [r2, #52]	; 0x34
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	4a0b      	ldr	r2, [pc, #44]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b62:	6453      	str	r3, [r2, #68]	; 0x44
 8006b64:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <HAL_PCD_MspInit+0xa0>)
 8006b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b70:	2200      	movs	r2, #0
 8006b72:	2100      	movs	r1, #0
 8006b74:	2043      	movs	r0, #67	; 0x43
 8006b76:	f7f9 fe24 	bl	80007c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b7a:	2043      	movs	r0, #67	; 0x43
 8006b7c:	f7f9 fe3d 	bl	80007fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b80:	bf00      	nop
 8006b82:	3728      	adds	r7, #40	; 0x28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	40020000 	.word	0x40020000

08006b90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f7fe f9b8 	bl	8004f1c <USBD_LL_SetupStage>
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006bc6:	78fa      	ldrb	r2, [r7, #3]
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7fe f9f0 	bl	8004fc2 <USBD_LL_DataOutStage>
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	3348      	adds	r3, #72	; 0x48
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	4619      	mov	r1, r3
 8006c12:	f7fe fa39 	bl	8005088 <USBD_LL_DataInStage>
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe fb3d 	bl	80052ac <USBD_LL_SOF>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c42:	2301      	movs	r3, #1
 8006c44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d001      	beq.n	8006c52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c4e:	f7ff fc8b 	bl	8006568 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c58:	7bfa      	ldrb	r2, [r7, #15]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe faea 	bl	8005236 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fe faa3 	bl	80051b4 <USBD_LL_Reset>
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fae5 	bl	8005256 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c94:	461a      	mov	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cae:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <HAL_PCD_SuspendCallback+0x4c>)
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <HAL_PCD_SuspendCallback+0x4c>)
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f043 0306 	orr.w	r3, r3, #6
 8006cb8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed00 	.word	0xe000ed00

08006cc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fad2 	bl	8005280 <USBD_LL_Resume>
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cf6:	78fa      	ldrb	r2, [r7, #3]
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fafd 	bl	80052fa <USBD_LL_IsoOUTIncomplete>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d1a:	78fa      	ldrb	r2, [r7, #3]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fade 	bl	80052e0 <USBD_LL_IsoINIncomplete>
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fe faea 	bl	8005314 <USBD_LL_DevConnected>
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fae7 	bl	800532a <USBD_LL_DevDisconnected>
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d13c      	bne.n	8006dee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d74:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <USBD_LL_Init+0x94>)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <USBD_LL_Init+0x94>)
 8006d80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d84:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <USBD_LL_Init+0x94>)
 8006d86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <USBD_LL_Init+0x94>)
 8006d8e:	2204      	movs	r2, #4
 8006d90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d92:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <USBD_LL_Init+0x94>)
 8006d94:	2202      	movs	r2, #2
 8006d96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d98:	4b17      	ldr	r3, [pc, #92]	; (8006df8 <USBD_LL_Init+0x94>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d9e:	4b16      	ldr	r3, [pc, #88]	; (8006df8 <USBD_LL_Init+0x94>)
 8006da0:	2202      	movs	r2, #2
 8006da2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006da4:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <USBD_LL_Init+0x94>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006daa:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <USBD_LL_Init+0x94>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <USBD_LL_Init+0x94>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006db6:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <USBD_LL_Init+0x94>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006dbc:	4b0e      	ldr	r3, [pc, #56]	; (8006df8 <USBD_LL_Init+0x94>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006dc2:	480d      	ldr	r0, [pc, #52]	; (8006df8 <USBD_LL_Init+0x94>)
 8006dc4:	f7f9 fecf 	bl	8000b66 <HAL_PCD_Init>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006dce:	f7ff fbcb 	bl	8006568 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	4808      	ldr	r0, [pc, #32]	; (8006df8 <USBD_LL_Init+0x94>)
 8006dd6:	f7fb f83a 	bl	8001e4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006dda:	2240      	movs	r2, #64	; 0x40
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4806      	ldr	r0, [pc, #24]	; (8006df8 <USBD_LL_Init+0x94>)
 8006de0:	f7fa ffee 	bl	8001dc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006de4:	2280      	movs	r2, #128	; 0x80
 8006de6:	2101      	movs	r1, #1
 8006de8:	4803      	ldr	r0, [pc, #12]	; (8006df8 <USBD_LL_Init+0x94>)
 8006dea:	f7fa ffe9 	bl	8001dc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	200066a4 	.word	0x200066a4

08006dfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7f9 ffc4 	bl	8000da0 <HAL_PCD_Start>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f92a 	bl	8007078 <USBD_Get_USB_Status>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4603      	mov	r3, r0
 8006e42:	70fb      	strb	r3, [r7, #3]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70bb      	strb	r3, [r7, #2]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e5a:	78bb      	ldrb	r3, [r7, #2]
 8006e5c:	883a      	ldrh	r2, [r7, #0]
 8006e5e:	78f9      	ldrb	r1, [r7, #3]
 8006e60:	f7fa fbb5 	bl	80015ce <HAL_PCD_EP_Open>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 f904 	bl	8007078 <USBD_Get_USB_Status>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fa fbfe 	bl	800169e <HAL_PCD_EP_Close>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 f8e5 	bl	8007078 <USBD_Get_USB_Status>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ed6:	78fa      	ldrb	r2, [r7, #3]
 8006ed8:	4611      	mov	r1, r2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fa fcd6 	bl	800188c <HAL_PCD_EP_SetStall>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f8c6 	bl	8007078 <USBD_Get_USB_Status>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fa fd1b 	bl	8001954 <HAL_PCD_EP_ClrStall>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 f8a7 	bl	8007078 <USBD_Get_USB_Status>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da0b      	bge.n	8006f6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	333e      	adds	r3, #62	; 0x3e
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	e00b      	b.n	8006f84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	4613      	mov	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fa fae8 	bl	8001584 <HAL_PCD_SetAddress>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 f85c 	bl	8007078 <USBD_Get_USB_Status>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fec:	7af9      	ldrb	r1, [r7, #11]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	f7fa fc01 	bl	80017f8 <HAL_PCD_EP_Transmit>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f83b 	bl	8007078 <USBD_Get_USB_Status>
 8007002:	4603      	mov	r3, r0
 8007004:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007006:	7dbb      	ldrb	r3, [r7, #22]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	460b      	mov	r3, r1
 800701e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800702e:	7af9      	ldrb	r1, [r7, #11]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	f7fa fb7d 	bl	8001732 <HAL_PCD_EP_Receive>
 8007038:	4603      	mov	r3, r0
 800703a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	4618      	mov	r0, r3
 8007040:	f000 f81a 	bl	8007078 <USBD_Get_USB_Status>
 8007044:	4603      	mov	r3, r0
 8007046:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007048:	7dbb      	ldrb	r3, [r7, #22]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f7fa fbad 	bl	80017c8 <HAL_PCD_EP_GetRxCount>
 800706e:	4603      	mov	r3, r0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	2b03      	cmp	r3, #3
 800708a:	d817      	bhi.n	80070bc <USBD_Get_USB_Status+0x44>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USBD_Get_USB_Status+0x1c>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070ab 	.word	0x080070ab
 800709c:	080070b1 	.word	0x080070b1
 80070a0:	080070b7 	.word	0x080070b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
    break;
 80070a8:	e00b      	b.n	80070c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070aa:	2303      	movs	r3, #3
 80070ac:	73fb      	strb	r3, [r7, #15]
    break;
 80070ae:	e008      	b.n	80070c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
    break;
 80070b4:	e005      	b.n	80070c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070b6:	2303      	movs	r3, #3
 80070b8:	73fb      	strb	r3, [r7, #15]
    break;
 80070ba:	e002      	b.n	80070c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	73fb      	strb	r3, [r7, #15]
    break;
 80070c0:	bf00      	nop
  }
  return usb_status;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2212      	movs	r2, #18
 80070e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070e2:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	2000014c 	.word	0x2000014c

080070f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2204      	movs	r2, #4
 8007104:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007106:	4b03      	ldr	r3, [pc, #12]	; (8007114 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20000160 	.word	0x20000160

08007118 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	6039      	str	r1, [r7, #0]
 8007122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4907      	ldr	r1, [pc, #28]	; (800714c <USBD_FS_ProductStrDescriptor+0x34>)
 800712e:	4808      	ldr	r0, [pc, #32]	; (8007150 <USBD_FS_ProductStrDescriptor+0x38>)
 8007130:	f7fe fe77 	bl	8005e22 <USBD_GetString>
 8007134:	e004      	b.n	8007140 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4904      	ldr	r1, [pc, #16]	; (800714c <USBD_FS_ProductStrDescriptor+0x34>)
 800713a:	4805      	ldr	r0, [pc, #20]	; (8007150 <USBD_FS_ProductStrDescriptor+0x38>)
 800713c:	f7fe fe71 	bl	8005e22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20006aac 	.word	0x20006aac
 8007150:	080076e0 	.word	0x080076e0

08007154 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	6039      	str	r1, [r7, #0]
 800715e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	4904      	ldr	r1, [pc, #16]	; (8007174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007164:	4804      	ldr	r0, [pc, #16]	; (8007178 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007166:	f7fe fe5c 	bl	8005e22 <USBD_GetString>
  return USBD_StrDesc;
 800716a:	4b02      	ldr	r3, [pc, #8]	; (8007174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20006aac 	.word	0x20006aac
 8007178:	080076f8 	.word	0x080076f8

0800717c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	6039      	str	r1, [r7, #0]
 8007186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	221a      	movs	r2, #26
 800718c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800718e:	f000 f843 	bl	8007218 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007192:	4b02      	ldr	r3, [pc, #8]	; (800719c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000164 	.word	0x20000164

080071a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d105      	bne.n	80071be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4907      	ldr	r1, [pc, #28]	; (80071d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071b6:	4808      	ldr	r0, [pc, #32]	; (80071d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071b8:	f7fe fe33 	bl	8005e22 <USBD_GetString>
 80071bc:	e004      	b.n	80071c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	4904      	ldr	r1, [pc, #16]	; (80071d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071c2:	4805      	ldr	r0, [pc, #20]	; (80071d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071c4:	f7fe fe2d 	bl	8005e22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071c8:	4b02      	ldr	r3, [pc, #8]	; (80071d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20006aac 	.word	0x20006aac
 80071d8:	0800770c 	.word	0x0800770c

080071dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	6039      	str	r1, [r7, #0]
 80071e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d105      	bne.n	80071fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	4907      	ldr	r1, [pc, #28]	; (8007210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071f2:	4808      	ldr	r0, [pc, #32]	; (8007214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071f4:	f7fe fe15 	bl	8005e22 <USBD_GetString>
 80071f8:	e004      	b.n	8007204 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4904      	ldr	r1, [pc, #16]	; (8007210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071fe:	4805      	ldr	r0, [pc, #20]	; (8007214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007200:	f7fe fe0f 	bl	8005e22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20006aac 	.word	0x20006aac
 8007214:	08007718 	.word	0x08007718

08007218 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <Get_SerialNum+0x44>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <Get_SerialNum+0x48>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800722a:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <Get_SerialNum+0x4c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800723e:	2208      	movs	r2, #8
 8007240:	4909      	ldr	r1, [pc, #36]	; (8007268 <Get_SerialNum+0x50>)
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f814 	bl	8007270 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007248:	2204      	movs	r2, #4
 800724a:	4908      	ldr	r1, [pc, #32]	; (800726c <Get_SerialNum+0x54>)
 800724c:	68b8      	ldr	r0, [r7, #8]
 800724e:	f000 f80f 	bl	8007270 <IntToUnicode>
  }
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	1fff7a10 	.word	0x1fff7a10
 8007260:	1fff7a14 	.word	0x1fff7a14
 8007264:	1fff7a18 	.word	0x1fff7a18
 8007268:	20000166 	.word	0x20000166
 800726c:	20000176 	.word	0x20000176

08007270 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]
 8007286:	e027      	b.n	80072d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	0f1b      	lsrs	r3, r3, #28
 800728c:	2b09      	cmp	r3, #9
 800728e:	d80b      	bhi.n	80072a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	461a      	mov	r2, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4413      	add	r3, r2
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	0f12      	lsrs	r2, r2, #28
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	3230      	adds	r2, #48	; 0x30
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e00a      	b.n	80072be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	461a      	mov	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	0f12      	lsrs	r2, r2, #28
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	3237      	adds	r2, #55	; 0x37
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	3301      	adds	r3, #1
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	4413      	add	r3, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	3301      	adds	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
 80072d8:	7dfa      	ldrb	r2, [r7, #23]
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d3d3      	bcc.n	8007288 <IntToUnicode+0x18>
  }
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80072ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007324 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80072f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80072f2:	e003      	b.n	80072fc <LoopCopyDataInit>

080072f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80072f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80072f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80072fa:	3104      	adds	r1, #4

080072fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80072fc:	480b      	ldr	r0, [pc, #44]	; (800732c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007300:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007302:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007304:	d3f6      	bcc.n	80072f4 <CopyDataInit>
  ldr  r2, =_sbss
 8007306:	4a0b      	ldr	r2, [pc, #44]	; (8007334 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007308:	e002      	b.n	8007310 <LoopFillZerobss>

0800730a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800730a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800730c:	f842 3b04 	str.w	r3, [r2], #4

08007310 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007310:	4b09      	ldr	r3, [pc, #36]	; (8007338 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007312:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007314:	d3f9      	bcc.n	800730a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007316:	f7ff f9bb 	bl	8006690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800731a:	f000 f817 	bl	800734c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800731e:	f7fe ff91 	bl	8006244 <main>
  bx  lr    
 8007322:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007324:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007328:	08007854 	.word	0x08007854
  ldr  r0, =_sdata
 800732c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007330:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8007334:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8007338:	20006cb0 	.word	0x20006cb0

0800733c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800733c:	e7fe      	b.n	800733c <ADC_IRQHandler>
	...

08007340 <__errno>:
 8007340:	4b01      	ldr	r3, [pc, #4]	; (8007348 <__errno+0x8>)
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000180 	.word	0x20000180

0800734c <__libc_init_array>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	4e0d      	ldr	r6, [pc, #52]	; (8007384 <__libc_init_array+0x38>)
 8007350:	4c0d      	ldr	r4, [pc, #52]	; (8007388 <__libc_init_array+0x3c>)
 8007352:	1ba4      	subs	r4, r4, r6
 8007354:	10a4      	asrs	r4, r4, #2
 8007356:	2500      	movs	r5, #0
 8007358:	42a5      	cmp	r5, r4
 800735a:	d109      	bne.n	8007370 <__libc_init_array+0x24>
 800735c:	4e0b      	ldr	r6, [pc, #44]	; (800738c <__libc_init_array+0x40>)
 800735e:	4c0c      	ldr	r4, [pc, #48]	; (8007390 <__libc_init_array+0x44>)
 8007360:	f000 f9b2 	bl	80076c8 <_init>
 8007364:	1ba4      	subs	r4, r4, r6
 8007366:	10a4      	asrs	r4, r4, #2
 8007368:	2500      	movs	r5, #0
 800736a:	42a5      	cmp	r5, r4
 800736c:	d105      	bne.n	800737a <__libc_init_array+0x2e>
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007374:	4798      	blx	r3
 8007376:	3501      	adds	r5, #1
 8007378:	e7ee      	b.n	8007358 <__libc_init_array+0xc>
 800737a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800737e:	4798      	blx	r3
 8007380:	3501      	adds	r5, #1
 8007382:	e7f2      	b.n	800736a <__libc_init_array+0x1e>
 8007384:	0800784c 	.word	0x0800784c
 8007388:	0800784c 	.word	0x0800784c
 800738c:	0800784c 	.word	0x0800784c
 8007390:	08007850 	.word	0x08007850

08007394 <malloc>:
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <malloc+0xc>)
 8007396:	4601      	mov	r1, r0
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	f000 b86d 	b.w	8007478 <_malloc_r>
 800739e:	bf00      	nop
 80073a0:	20000180 	.word	0x20000180

080073a4 <free>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <free+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f000 b817 	b.w	80073dc <_free_r>
 80073ae:	bf00      	nop
 80073b0:	20000180 	.word	0x20000180

080073b4 <memcpy>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	1e43      	subs	r3, r0, #1
 80073b8:	440a      	add	r2, r1
 80073ba:	4291      	cmp	r1, r2
 80073bc:	d100      	bne.n	80073c0 <memcpy+0xc>
 80073be:	bd10      	pop	{r4, pc}
 80073c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c8:	e7f7      	b.n	80073ba <memcpy+0x6>

080073ca <memset>:
 80073ca:	4402      	add	r2, r0
 80073cc:	4603      	mov	r3, r0
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d100      	bne.n	80073d4 <memset+0xa>
 80073d2:	4770      	bx	lr
 80073d4:	f803 1b01 	strb.w	r1, [r3], #1
 80073d8:	e7f9      	b.n	80073ce <memset+0x4>
	...

080073dc <_free_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4605      	mov	r5, r0
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d045      	beq.n	8007470 <_free_r+0x94>
 80073e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e8:	1f0c      	subs	r4, r1, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfb8      	it	lt
 80073ee:	18e4      	addlt	r4, r4, r3
 80073f0:	f000 f95b 	bl	80076aa <__malloc_lock>
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <_free_r+0x98>)
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	4610      	mov	r0, r2
 80073fa:	b933      	cbnz	r3, 800740a <_free_r+0x2e>
 80073fc:	6063      	str	r3, [r4, #4]
 80073fe:	6014      	str	r4, [r2, #0]
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007406:	f000 b951 	b.w	80076ac <__malloc_unlock>
 800740a:	42a3      	cmp	r3, r4
 800740c:	d90c      	bls.n	8007428 <_free_r+0x4c>
 800740e:	6821      	ldr	r1, [r4, #0]
 8007410:	1862      	adds	r2, r4, r1
 8007412:	4293      	cmp	r3, r2
 8007414:	bf04      	itt	eq
 8007416:	681a      	ldreq	r2, [r3, #0]
 8007418:	685b      	ldreq	r3, [r3, #4]
 800741a:	6063      	str	r3, [r4, #4]
 800741c:	bf04      	itt	eq
 800741e:	1852      	addeq	r2, r2, r1
 8007420:	6022      	streq	r2, [r4, #0]
 8007422:	6004      	str	r4, [r0, #0]
 8007424:	e7ec      	b.n	8007400 <_free_r+0x24>
 8007426:	4613      	mov	r3, r2
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	b10a      	cbz	r2, 8007430 <_free_r+0x54>
 800742c:	42a2      	cmp	r2, r4
 800742e:	d9fa      	bls.n	8007426 <_free_r+0x4a>
 8007430:	6819      	ldr	r1, [r3, #0]
 8007432:	1858      	adds	r0, r3, r1
 8007434:	42a0      	cmp	r0, r4
 8007436:	d10b      	bne.n	8007450 <_free_r+0x74>
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	4401      	add	r1, r0
 800743c:	1858      	adds	r0, r3, r1
 800743e:	4282      	cmp	r2, r0
 8007440:	6019      	str	r1, [r3, #0]
 8007442:	d1dd      	bne.n	8007400 <_free_r+0x24>
 8007444:	6810      	ldr	r0, [r2, #0]
 8007446:	6852      	ldr	r2, [r2, #4]
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	4401      	add	r1, r0
 800744c:	6019      	str	r1, [r3, #0]
 800744e:	e7d7      	b.n	8007400 <_free_r+0x24>
 8007450:	d902      	bls.n	8007458 <_free_r+0x7c>
 8007452:	230c      	movs	r3, #12
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	e7d3      	b.n	8007400 <_free_r+0x24>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	1821      	adds	r1, r4, r0
 800745c:	428a      	cmp	r2, r1
 800745e:	bf04      	itt	eq
 8007460:	6811      	ldreq	r1, [r2, #0]
 8007462:	6852      	ldreq	r2, [r2, #4]
 8007464:	6062      	str	r2, [r4, #4]
 8007466:	bf04      	itt	eq
 8007468:	1809      	addeq	r1, r1, r0
 800746a:	6021      	streq	r1, [r4, #0]
 800746c:	605c      	str	r4, [r3, #4]
 800746e:	e7c7      	b.n	8007400 <_free_r+0x24>
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	bf00      	nop
 8007474:	20005388 	.word	0x20005388

08007478 <_malloc_r>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	1ccd      	adds	r5, r1, #3
 800747c:	f025 0503 	bic.w	r5, r5, #3
 8007480:	3508      	adds	r5, #8
 8007482:	2d0c      	cmp	r5, #12
 8007484:	bf38      	it	cc
 8007486:	250c      	movcc	r5, #12
 8007488:	2d00      	cmp	r5, #0
 800748a:	4606      	mov	r6, r0
 800748c:	db01      	blt.n	8007492 <_malloc_r+0x1a>
 800748e:	42a9      	cmp	r1, r5
 8007490:	d903      	bls.n	800749a <_malloc_r+0x22>
 8007492:	230c      	movs	r3, #12
 8007494:	6033      	str	r3, [r6, #0]
 8007496:	2000      	movs	r0, #0
 8007498:	bd70      	pop	{r4, r5, r6, pc}
 800749a:	f000 f906 	bl	80076aa <__malloc_lock>
 800749e:	4a23      	ldr	r2, [pc, #140]	; (800752c <_malloc_r+0xb4>)
 80074a0:	6814      	ldr	r4, [r2, #0]
 80074a2:	4621      	mov	r1, r4
 80074a4:	b991      	cbnz	r1, 80074cc <_malloc_r+0x54>
 80074a6:	4c22      	ldr	r4, [pc, #136]	; (8007530 <_malloc_r+0xb8>)
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	b91b      	cbnz	r3, 80074b4 <_malloc_r+0x3c>
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 f841 	bl	8007534 <_sbrk_r>
 80074b2:	6020      	str	r0, [r4, #0]
 80074b4:	4629      	mov	r1, r5
 80074b6:	4630      	mov	r0, r6
 80074b8:	f000 f83c 	bl	8007534 <_sbrk_r>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d126      	bne.n	800750e <_malloc_r+0x96>
 80074c0:	230c      	movs	r3, #12
 80074c2:	6033      	str	r3, [r6, #0]
 80074c4:	4630      	mov	r0, r6
 80074c6:	f000 f8f1 	bl	80076ac <__malloc_unlock>
 80074ca:	e7e4      	b.n	8007496 <_malloc_r+0x1e>
 80074cc:	680b      	ldr	r3, [r1, #0]
 80074ce:	1b5b      	subs	r3, r3, r5
 80074d0:	d41a      	bmi.n	8007508 <_malloc_r+0x90>
 80074d2:	2b0b      	cmp	r3, #11
 80074d4:	d90f      	bls.n	80074f6 <_malloc_r+0x7e>
 80074d6:	600b      	str	r3, [r1, #0]
 80074d8:	50cd      	str	r5, [r1, r3]
 80074da:	18cc      	adds	r4, r1, r3
 80074dc:	4630      	mov	r0, r6
 80074de:	f000 f8e5 	bl	80076ac <__malloc_unlock>
 80074e2:	f104 000b 	add.w	r0, r4, #11
 80074e6:	1d23      	adds	r3, r4, #4
 80074e8:	f020 0007 	bic.w	r0, r0, #7
 80074ec:	1ac3      	subs	r3, r0, r3
 80074ee:	d01b      	beq.n	8007528 <_malloc_r+0xb0>
 80074f0:	425a      	negs	r2, r3
 80074f2:	50e2      	str	r2, [r4, r3]
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	428c      	cmp	r4, r1
 80074f8:	bf0d      	iteet	eq
 80074fa:	6863      	ldreq	r3, [r4, #4]
 80074fc:	684b      	ldrne	r3, [r1, #4]
 80074fe:	6063      	strne	r3, [r4, #4]
 8007500:	6013      	streq	r3, [r2, #0]
 8007502:	bf18      	it	ne
 8007504:	460c      	movne	r4, r1
 8007506:	e7e9      	b.n	80074dc <_malloc_r+0x64>
 8007508:	460c      	mov	r4, r1
 800750a:	6849      	ldr	r1, [r1, #4]
 800750c:	e7ca      	b.n	80074a4 <_malloc_r+0x2c>
 800750e:	1cc4      	adds	r4, r0, #3
 8007510:	f024 0403 	bic.w	r4, r4, #3
 8007514:	42a0      	cmp	r0, r4
 8007516:	d005      	beq.n	8007524 <_malloc_r+0xac>
 8007518:	1a21      	subs	r1, r4, r0
 800751a:	4630      	mov	r0, r6
 800751c:	f000 f80a 	bl	8007534 <_sbrk_r>
 8007520:	3001      	adds	r0, #1
 8007522:	d0cd      	beq.n	80074c0 <_malloc_r+0x48>
 8007524:	6025      	str	r5, [r4, #0]
 8007526:	e7d9      	b.n	80074dc <_malloc_r+0x64>
 8007528:	bd70      	pop	{r4, r5, r6, pc}
 800752a:	bf00      	nop
 800752c:	20005388 	.word	0x20005388
 8007530:	2000538c 	.word	0x2000538c

08007534 <_sbrk_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4c06      	ldr	r4, [pc, #24]	; (8007550 <_sbrk_r+0x1c>)
 8007538:	2300      	movs	r3, #0
 800753a:	4605      	mov	r5, r0
 800753c:	4608      	mov	r0, r1
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	f7ff f87a 	bl	8006638 <_sbrk>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_sbrk_r+0x1a>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	b103      	cbz	r3, 800754e <_sbrk_r+0x1a>
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20006cac 	.word	0x20006cac

08007554 <_strtol_l.isra.0>:
 8007554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	4692      	mov	sl, r2
 800755e:	461f      	mov	r7, r3
 8007560:	468b      	mov	fp, r1
 8007562:	465d      	mov	r5, fp
 8007564:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800756a:	f000 f889 	bl	8007680 <__locale_ctype_ptr_l>
 800756e:	4420      	add	r0, r4
 8007570:	7846      	ldrb	r6, [r0, #1]
 8007572:	f016 0608 	ands.w	r6, r6, #8
 8007576:	d10b      	bne.n	8007590 <_strtol_l.isra.0+0x3c>
 8007578:	2c2d      	cmp	r4, #45	; 0x2d
 800757a:	d10b      	bne.n	8007594 <_strtol_l.isra.0+0x40>
 800757c:	782c      	ldrb	r4, [r5, #0]
 800757e:	2601      	movs	r6, #1
 8007580:	f10b 0502 	add.w	r5, fp, #2
 8007584:	b167      	cbz	r7, 80075a0 <_strtol_l.isra.0+0x4c>
 8007586:	2f10      	cmp	r7, #16
 8007588:	d114      	bne.n	80075b4 <_strtol_l.isra.0+0x60>
 800758a:	2c30      	cmp	r4, #48	; 0x30
 800758c:	d00a      	beq.n	80075a4 <_strtol_l.isra.0+0x50>
 800758e:	e011      	b.n	80075b4 <_strtol_l.isra.0+0x60>
 8007590:	46ab      	mov	fp, r5
 8007592:	e7e6      	b.n	8007562 <_strtol_l.isra.0+0xe>
 8007594:	2c2b      	cmp	r4, #43	; 0x2b
 8007596:	bf04      	itt	eq
 8007598:	782c      	ldrbeq	r4, [r5, #0]
 800759a:	f10b 0502 	addeq.w	r5, fp, #2
 800759e:	e7f1      	b.n	8007584 <_strtol_l.isra.0+0x30>
 80075a0:	2c30      	cmp	r4, #48	; 0x30
 80075a2:	d127      	bne.n	80075f4 <_strtol_l.isra.0+0xa0>
 80075a4:	782b      	ldrb	r3, [r5, #0]
 80075a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075aa:	2b58      	cmp	r3, #88	; 0x58
 80075ac:	d14b      	bne.n	8007646 <_strtol_l.isra.0+0xf2>
 80075ae:	786c      	ldrb	r4, [r5, #1]
 80075b0:	2710      	movs	r7, #16
 80075b2:	3502      	adds	r5, #2
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	bf0c      	ite	eq
 80075b8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80075bc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80075c0:	2200      	movs	r2, #0
 80075c2:	fbb1 fef7 	udiv	lr, r1, r7
 80075c6:	4610      	mov	r0, r2
 80075c8:	fb07 1c1e 	mls	ip, r7, lr, r1
 80075cc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80075d0:	2b09      	cmp	r3, #9
 80075d2:	d811      	bhi.n	80075f8 <_strtol_l.isra.0+0xa4>
 80075d4:	461c      	mov	r4, r3
 80075d6:	42a7      	cmp	r7, r4
 80075d8:	dd1d      	ble.n	8007616 <_strtol_l.isra.0+0xc2>
 80075da:	1c53      	adds	r3, r2, #1
 80075dc:	d007      	beq.n	80075ee <_strtol_l.isra.0+0x9a>
 80075de:	4586      	cmp	lr, r0
 80075e0:	d316      	bcc.n	8007610 <_strtol_l.isra.0+0xbc>
 80075e2:	d101      	bne.n	80075e8 <_strtol_l.isra.0+0x94>
 80075e4:	45a4      	cmp	ip, r4
 80075e6:	db13      	blt.n	8007610 <_strtol_l.isra.0+0xbc>
 80075e8:	fb00 4007 	mla	r0, r0, r7, r4
 80075ec:	2201      	movs	r2, #1
 80075ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075f2:	e7eb      	b.n	80075cc <_strtol_l.isra.0+0x78>
 80075f4:	270a      	movs	r7, #10
 80075f6:	e7dd      	b.n	80075b4 <_strtol_l.isra.0+0x60>
 80075f8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80075fc:	2b19      	cmp	r3, #25
 80075fe:	d801      	bhi.n	8007604 <_strtol_l.isra.0+0xb0>
 8007600:	3c37      	subs	r4, #55	; 0x37
 8007602:	e7e8      	b.n	80075d6 <_strtol_l.isra.0+0x82>
 8007604:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007608:	2b19      	cmp	r3, #25
 800760a:	d804      	bhi.n	8007616 <_strtol_l.isra.0+0xc2>
 800760c:	3c57      	subs	r4, #87	; 0x57
 800760e:	e7e2      	b.n	80075d6 <_strtol_l.isra.0+0x82>
 8007610:	f04f 32ff 	mov.w	r2, #4294967295
 8007614:	e7eb      	b.n	80075ee <_strtol_l.isra.0+0x9a>
 8007616:	1c53      	adds	r3, r2, #1
 8007618:	d108      	bne.n	800762c <_strtol_l.isra.0+0xd8>
 800761a:	2322      	movs	r3, #34	; 0x22
 800761c:	f8c8 3000 	str.w	r3, [r8]
 8007620:	4608      	mov	r0, r1
 8007622:	f1ba 0f00 	cmp.w	sl, #0
 8007626:	d107      	bne.n	8007638 <_strtol_l.isra.0+0xe4>
 8007628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	b106      	cbz	r6, 8007630 <_strtol_l.isra.0+0xdc>
 800762e:	4240      	negs	r0, r0
 8007630:	f1ba 0f00 	cmp.w	sl, #0
 8007634:	d00c      	beq.n	8007650 <_strtol_l.isra.0+0xfc>
 8007636:	b122      	cbz	r2, 8007642 <_strtol_l.isra.0+0xee>
 8007638:	3d01      	subs	r5, #1
 800763a:	f8ca 5000 	str.w	r5, [sl]
 800763e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007642:	464d      	mov	r5, r9
 8007644:	e7f9      	b.n	800763a <_strtol_l.isra.0+0xe6>
 8007646:	2430      	movs	r4, #48	; 0x30
 8007648:	2f00      	cmp	r7, #0
 800764a:	d1b3      	bne.n	80075b4 <_strtol_l.isra.0+0x60>
 800764c:	2708      	movs	r7, #8
 800764e:	e7b1      	b.n	80075b4 <_strtol_l.isra.0+0x60>
 8007650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007654 <strtol>:
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <strtol+0x24>)
 8007656:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007658:	681c      	ldr	r4, [r3, #0]
 800765a:	4d08      	ldr	r5, [pc, #32]	; (800767c <strtol+0x28>)
 800765c:	6a23      	ldr	r3, [r4, #32]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bf08      	it	eq
 8007662:	462b      	moveq	r3, r5
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	4613      	mov	r3, r2
 8007668:	460a      	mov	r2, r1
 800766a:	4601      	mov	r1, r0
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff ff71 	bl	8007554 <_strtol_l.isra.0>
 8007672:	b003      	add	sp, #12
 8007674:	bd30      	pop	{r4, r5, pc}
 8007676:	bf00      	nop
 8007678:	20000180 	.word	0x20000180
 800767c:	200001e4 	.word	0x200001e4

08007680 <__locale_ctype_ptr_l>:
 8007680:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007684:	4770      	bx	lr

08007686 <__ascii_mbtowc>:
 8007686:	b082      	sub	sp, #8
 8007688:	b901      	cbnz	r1, 800768c <__ascii_mbtowc+0x6>
 800768a:	a901      	add	r1, sp, #4
 800768c:	b142      	cbz	r2, 80076a0 <__ascii_mbtowc+0x1a>
 800768e:	b14b      	cbz	r3, 80076a4 <__ascii_mbtowc+0x1e>
 8007690:	7813      	ldrb	r3, [r2, #0]
 8007692:	600b      	str	r3, [r1, #0]
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	1c10      	adds	r0, r2, #0
 8007698:	bf18      	it	ne
 800769a:	2001      	movne	r0, #1
 800769c:	b002      	add	sp, #8
 800769e:	4770      	bx	lr
 80076a0:	4610      	mov	r0, r2
 80076a2:	e7fb      	b.n	800769c <__ascii_mbtowc+0x16>
 80076a4:	f06f 0001 	mvn.w	r0, #1
 80076a8:	e7f8      	b.n	800769c <__ascii_mbtowc+0x16>

080076aa <__malloc_lock>:
 80076aa:	4770      	bx	lr

080076ac <__malloc_unlock>:
 80076ac:	4770      	bx	lr

080076ae <__ascii_wctomb>:
 80076ae:	b149      	cbz	r1, 80076c4 <__ascii_wctomb+0x16>
 80076b0:	2aff      	cmp	r2, #255	; 0xff
 80076b2:	bf85      	ittet	hi
 80076b4:	238a      	movhi	r3, #138	; 0x8a
 80076b6:	6003      	strhi	r3, [r0, #0]
 80076b8:	700a      	strbls	r2, [r1, #0]
 80076ba:	f04f 30ff 	movhi.w	r0, #4294967295
 80076be:	bf98      	it	ls
 80076c0:	2001      	movls	r0, #1
 80076c2:	4770      	bx	lr
 80076c4:	4608      	mov	r0, r1
 80076c6:	4770      	bx	lr

080076c8 <_init>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr

080076d4 <_fini>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	bf00      	nop
 80076d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076da:	bc08      	pop	{r3}
 80076dc:	469e      	mov	lr, r3
 80076de:	4770      	bx	lr
